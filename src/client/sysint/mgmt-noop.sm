/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup mgmtint
 *
 *  PVFS2 management interface routines for sending "no operation"
 *  (no-op) requests.  This is primarily used for verifying connectivity
 *  to servers.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "bmi.h"
#include "security-util.h"
#include "sid.h"

%%

machine pvfs2_client_mgmt_noop_sm
{
    state setup_msgpair
    {
        run mgmt_noop_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_noop_cleanup;
        default => terminate;
    }
}

%%

/** Initiate sending of no-op request to a specific server.
 */
PVFS_error PVFS_imgmt_noop(PVFS_fs_id fs_id,
                           const PVFS_credential *credential,
                           PVFS_BMI_addr_t addr,
                           PVFS_mgmt_op_id *op_id,
                           PVFS_hint hints,
                           void *user_ptr)
{
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_imgmt_noop entered\n");

    PINT_smcb_alloc(&smcb,
                    PVFS_MGMT_NOOP,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);

    if (!smcb)
    {
        return -PVFS_ENOMEM;
    }

    PINT_state_machine_locate(smcb, 1);

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);
    PINT_msgpair_init(&sm_p->msgarray_op);

    sm_p->msgarray_op.msgpair.fs_id = fs_id;
    sm_p->msgarray_op.msgpair.sid_count = 1;
    sm_p->msgarray_op.msgpair.sid_index = 0;
    sm_p->msgarray_op.msgpair.sid_array = NULL;
    sm_p->msgarray_op.msgpair.retry_flag = PVFS_MSGPAIR_NO_RETRY;
    sm_p->msgarray_op.msgpair.svr_addr = addr;

    PVFS_hint_copy(hints, &sm_p->hints);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_noop calling "
                 "PINT_client_state_machine_post()\n");

    return PINT_client_state_machine_post(smcb, op_id, user_ptr);
}

/** Send a no-op request to a specific server and receive response.
 */
PVFS_error PVFS_mgmt_noop(PVFS_fs_id fs_id,
                          const PVFS_credential *credential,
                          PVFS_BMI_addr_t addr,
                          PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_mgmt_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_mgmt_noop entered\n");

    ret = PVFS_imgmt_noop(fs_id, credential, addr, &op_id, hints, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_noop call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "noop", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    PINT_mgmt_release(op_id);
    return error;
}

static PINT_sm_action mgmt_noop_setup_msgpair(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_capability capability;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "noop state: mgmt_noop_setup_msgpair\n");

    PINT_null_capability(&capability);
    PINT_SERVREQ_MGMT_NOOP_FILL(sm_p->msgarray_op.msgpair.req,
                                capability,
                                sm_p->hints);
    PINT_cleanup_capability(&capability);

    PINT_sm_push_frame(smcb,
                       0,
                       &sm_p->msgarray_op);
    
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_noop_cleanup(struct PINT_smcb *smcb,
                                        job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG, "noop state: mgmt_noop_cleanup\n");

    sm_p->error_code = js_p->error_code;

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
