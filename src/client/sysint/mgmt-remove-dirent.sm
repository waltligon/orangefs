/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup mgmtint
 *
 *  PVFS2 management interface routines for removing specific directory
 *  entries.  These are used primarily for file system repair purposes,
 *  although they can also be used to create specific inconsistency cases
 *  for testing of failure tolerance.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pint-util.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "pvfs2-internal.h"
#include "sid.h"
#include "dist-dir-utils.h"

static int mgmt_remove_dirent_comp_fn(void *v_p,
                                      struct PVFS_server_resp *resp_p,
                                      int i);

%%

machine pvfs2_client_mgmt_remove_dirent_sm
{
    state init
    {
        run mgmt_remove_dirent_init;
        default => remove_dirent_get_capability;
    }
    
    state remove_dirent_get_capability
    {
        jump pvfs2_client_getattr_sm;
        success => remove_dirent_setup_msgpair;
        default => cleanup;
    }

    state remove_dirent_setup_msgpair
    {
        run mgmt_remove_dirent_setup_msgpair;
        success => remove_dirent_xfer_msgpair;
        default => cleanup;
    }

    state remove_dirent_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => remove_dirent_retry_or_fail;
    }

    state remove_dirent_retry_or_fail
    {
        run mgmt_remove_dirent_retry_or_fail;
        success => remove_dirent_get_capability;
        default => cleanup;
    }

    state cleanup
    {
        run mgmt_remove_dirent_cleanup;
        default => terminate;
    }
}

%%

/** Initiate removal of a specific directory entry.
 */
PVFS_error PVFS_imgmt_remove_dirent(PVFS_object_ref parent_ref,
                                    char *entry,
                                    const PVFS_credential *credential,
                                    PVFS_mgmt_op_id *op_id,
                                    PVFS_hint hints,
                                    void *user_ptr)
{
    PVFS_error ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_imgmt_remove_dirent entered\n");

    if (!PVFS_OID_cmp(&parent_ref.handle, &PVFS_HANDLE_NULL) ||
        (parent_ref.fs_id == PVFS_FS_ID_NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
        return ret;
    }

    PINT_smcb_alloc(&smcb,
                    PVFS_MGMT_REMOVE_DIRENT,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);

    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }

    PINT_state_machine_locate(smcb, 1);

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, parent_ref.fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);

    sm_p->parent_ref = parent_ref;
    sm_p->u.mgmt_remove_dirent.entry = entry;
    PVFS_hint_copy(hints, &sm_p->hints);

    gossip_debug(
        GOSSIP_CLIENT_DEBUG, "Trying to remove dirent %s under %s,%d\n",
        sm_p->u.mgmt_remove_dirent.entry, PVFS_OID_str(&parent_ref.handle),
        parent_ref.fs_id);

    return PINT_client_state_machine_post(smcb, op_id, user_ptr);
}

/** Remove a specific directory entry.
 */
PVFS_error PVFS_mgmt_remove_dirent(PVFS_object_ref parent_ref,
                                   char *entry,
                                   const PVFS_credential *credential,
                                   PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_mgmt_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PVFS_mgmt_remove_dirent entered\n");

    ret = PVFS_imgmt_remove_dirent(parent_ref,
                                   entry,
                                   credential,
                                   &op_id,
                                   hints,
                                   NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_imgmt_remove_dirent call", ret);
        error = ret;
    }
    else
    {
        ret = PVFS_mgmt_wait(op_id, "remove_dirent", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_mgmt_wait call", ret);
            error = ret;
        }
    }

    PINT_mgmt_release(op_id);
    return error;
}

/* <================== COMPLETION FUNCTIONS =====================> */

static int mgmt_remove_dirent_comp_fn(void *v_p,
                                      struct PVFS_server_resp *resp_p,
                                      int index)
{
    PINT_smcb *smcb = v_p;
    PINT_smcb *parent_smcb = smcb->parent_smcb;
#ifdef WIN32
    PINT_client_sm *sm_p = PINT_sm_frame(parent_smcb, PINT_MSGPAIR_PARENT_SM);
#else
    PINT_client_sm *sm_p __attribute__((unused)) =
                    PINT_sm_frame(parent_smcb, PINT_MSGPAIR_PARENT_SM);
#endif
    assert(resp_p->op == PVFS_SERV_MGMT_REMOVE_DIRENT);

    if (resp_p->status == 0)
    {
        gossip_debug(
            GOSSIP_CLIENT_DEBUG,
            "  mgmt_remove_dirent_comp_fn: dirent %s under %s,%d removed\n",
            sm_p->u.mgmt_remove_dirent.entry,
            PVFS_OID_str(&sm_p->parent_ref.handle),
            sm_p->parent_ref.fs_id);
    }
    return resp_p->status;
}

/* <================= STATE ACTION FUNCTIONS ====================> */

static PINT_sm_action mgmt_remove_dirent_init(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mgmt_remove_dirent_init called\n");
    
    PINT_SM_GETATTR_STATE_FILL(
        sm_p->getattr,
        sm_p->parent_ref,
        PVFS_ATTR_COMMON_ALL | PVFS_ATTR_DIR_HINT |
            PVFS_ATTR_CAPABILITY | PVFS_ATTR_DISTDIR_ATTR, 
        PVFS_TYPE_DIRECTORY,
        0);

    assert(js_p->error_code == 0);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_remove_dirent_setup_msgpair(struct PINT_smcb *smcb,
                                                       job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_dist_dir_hash_type dirdata_hash;
    int dirdata_server_index;

    js_p->error_code = 0;

    /* find the hash value and the dist dir bucket */
    dirdata_hash = PINT_encrypt_dirdata(sm_p->u.mgmt_remove_dirent.entry);
    gossip_debug(GOSSIP_REMOVE_DEBUG,
            " encrypt dirent %s into hash value %llu.\n",
            sm_p->u.mgmt_remove_dirent.entry,
            llu(dirdata_hash));

    dirdata_server_index = PINT_find_dist_dir_bucket(dirdata_hash,
                                 &sm_p->getattr.attr.u.dir.dist_dir_attr,
                                 sm_p->getattr.attr.u.dir.dist_dir_bitmap);

    gossip_debug(GOSSIP_REMOVE_DEBUG,
            " selecting bucket No.%d from dist_dir_bitmap.\n",
            dirdata_server_index);

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    PINT_SERVREQ_MGMT_REMOVE_DIRENT_FILL(
                msg_p->req,
                sm_p->getattr.attr.capability,
                sm_p->parent_ref.fs_id,
                sm_p->parent_ref.handle,
                sm_p->getattr.attr.u.dir.dirdata_handles[dirdata_server_index],
                sm_p->parent_ref.sid_count,
                sm_p->parent_ref.sid_array,
                sm_p->u.mgmt_remove_dirent.entry,
                sm_p->hints);

    gossip_debug(GOSSIP_REMOVE_DEBUG,
                 "- doing MGMT_REMOVE_DIRENT %s under %s,%d\n",
                 sm_p->u.mgmt_remove_dirent.entry,
                 PVFS_OID_str(&sm_p->parent_ref.handle),
                 sm_p->parent_ref.fs_id);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    /* send to dirdata server */
    msg_p->handle = 
        sm_p->getattr.attr.u.dir.dirdata_handles[dirdata_server_index];
    msg_p->sid_count = sm_p->parent_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->parent_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = mgmt_remove_dirent_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);

    if (ret)
    {
        gossip_err("Failed to map server address\n");
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

/* retry should be dealt with in MPA so it is done them all of the time
 * so this state should probably just go away - V3
 */
static PINT_sm_action mgmt_remove_dirent_retry_or_fail(
        struct PINT_smcb *smcb, job_status_s *js_p)
{           
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    /* if need to retry. clear the error_code and setup getattr. */
    if(js_p->error_code == -PVFS_EAGAIN)
    {
/* V3 remove
        && sm_p->u.mgmt_remove_dirent.retry_count < sm_p->msgarray_op.params.retry_limit)
    {
        sm_p->u.mgmt_remove_dirent.retry_count++;

        gossip_debug(GOSSIP_CLIENT_DEBUG,
                     "mgmt-remove-dirent: received -PVFS_EAGAIN, "
                     "will retry getattr and mgmt-remove-dirent "
                     "(attempt number %d).\n",
                     sm_p->u.mgmt_remove_dirent.retry_count);
*/
        
        /* clear acache content */
        PINT_acache_invalidate(sm_p->parent_ref);
        
        PINT_SM_GETATTR_STATE_FILL(
                sm_p->getattr,
                sm_p->parent_ref,
                PVFS_ATTR_COMMON_ALL|PVFS_ATTR_DIR_HINT|
                    PVFS_ATTR_CAPABILITY|PVFS_ATTR_DISTDIR_ATTR,
                PVFS_TYPE_DIRECTORY,
                0);

        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    PVFS_perror_gossip("mgmt-remove-dirent failed", js_p->error_code);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mgmt_remove_dirent_cleanup(
    struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "mgmt_remove_dirent_cleanup called\n");

    PINT_SM_GETATTR_STATE_CLEAR(sm_p->getattr);
    sm_p->error_code = js_p->error_code;

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
