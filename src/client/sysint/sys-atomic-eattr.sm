/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file PVFS system calls for atomically retrieving the previous 
 * extended attributes and setting new extended attributes
 *  \ingroup sysint
 */

#include <string.h>
#include <assert.h>
#ifndef WIN32
#include <unistd.h>
#endif

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "pvfs2-util.h"
#include "pvfs2-usrint.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "pint-eattr.h"
#include "security-util.h"
#include "sid.h"

static int atomic_eattr_comp_fn(void *v_p,
                                struct PVFS_server_resp *resp_p,
                                int i);

%%

machine pvfs2_client_atomic_eattr_sm
{
    state getattr
    {
        jump pvfs2_client_getattr_sm;
        success => setup_msgpair;
        default => cleanup;
    }

    state setup_msgpair
    {
        run atomic_eattr_setup_msgpair;
        success => xfer_msgpair;
        default => cleanup;
    }

    state xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run atomic_eattr_cleanup;
        default => terminate;
    }
}

%%


/** Non-blocking call to atomically read/write a list of attributes
 * NOTE: The flags are currently not implemented
 */
PVFS_error PVFS_isys_atomiceattr_list(PVFS_object_ref ref,
                                      const PVFS_credential *credential,
                                      int32_t nkey,
                                      PVFS_ds_keyval *key_array,
                                      PVFS_ds_keyval *old_val_array,
                                      PVFS_ds_keyval *new_val_array,
                                      PVFS_sysresp_atomiceattr *resp_p,
                                      int32_t flags,
                                      PVFS_sys_op_id *op_id,
                                      int32_t opcode,
                                      PVFS_hint hints,
                                      void *user_ptr)
{
    int ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "PINT_isys_atomic_eattr entered\n");

    if(gossip_debug_enabled(GOSSIP_SETEATTR_DEBUG))
    {
        int i;
        
        /* TODO: Test this gossip debug since valbuf is now within loop
         *       This needs to change in set-eattr.sm
         */
        
        gossip_debug(GOSSIP_SETEATTR_DEBUG,"Atomic read/write extended attributes:\n");
        for(i = 0; i < nkey; ++i)
        {
            char *valBuf = (char *)old_val_array[i].buffer;
            int j;

            gossip_debug(GOSSIP_SETEATTR_DEBUG,"eattr[%d]: key=%s\n"
                                              , i
                                              ,(char *)key_array[i].buffer);
                        
            for (j = 0; j < old_val_array[i].buffer_sz; j++)
            {
                gossip_debug(GOSSIP_SETEATTR_DEBUG,"      old_val[%d]=%#x\n"
                                                  ,j
                                                  ,(unsigned int)valBuf[j]);
            }
        }/*end for*/
    } /*end if*/

    if (!PVFS_OID_cmp(&ref.handle, &PVFS_HANDLE_NULL) ||
       (ref.fs_id == PVFS_FS_ID_NULL) ||
       (resp_p == NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
        return ret;
    }

    PINT_smcb_alloc(&smcb,
                    PVFS_SYS_ATOMICEATTR,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);

    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }

    PINT_state_machine_locate(smcb, 1);

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, ref.fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);
    sm_p->u.atomiceattr.nkey = nkey;
    sm_p->u.atomiceattr.key_array = key_array;
    sm_p->u.atomiceattr.old_val_array = old_val_array;
    sm_p->u.atomiceattr.new_val_array = new_val_array;
    sm_p->u.atomiceattr.resp_p = resp_p;
    sm_p->u.atomiceattr.opcode = opcode;
    sm_p->u.atomiceattr.flags = flags;
    sm_p->error_code = 0;
    sm_p->object_ref = ref;
    PVFS_hint_copy(hints, &sm_p->hints);

    if (sm_p->u.atomiceattr.opcode == PVFS_FETCH_AND_ADD)
    {
        int i;
        for (i = 0; i < nkey; i++)
        {
            sm_p->u.atomiceattr.old_val_array[i].buffer = "";
            sm_p->u.atomiceattr.old_val_array[i].buffer_sz = 0;
        }
    }

    PINT_SM_GETATTR_STATE_FILL(sm_p->getattr,
                               sm_p->object_ref,
                               PVFS_ATTR_CAPABILITY,
                               PVFS_TYPE_NONE,
                               0);

    return PINT_client_state_machine_post(smcb,  op_id, user_ptr);
}

/** Atomically read/write a list of attributes
 */
PVFS_error PVFS_sys_atomiceattr_list(PVFS_object_ref ref,
                                     const PVFS_credential *credential,
                                     int32_t nkey,
                                     PVFS_ds_keyval *key_array,
                                     PVFS_ds_keyval *old_val_array,
                                     PVFS_ds_keyval *new_val_array,
                                     PVFS_sysresp_atomiceattr *resp_p,
                                     int32_t flags,
                                     int32_t opcode,
                                     PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_atomiceattr entered\n");

    ret = PVFS_isys_atomiceattr_list(ref,
                                     credential,
                                     nkey,
                                     key_array,
                                     old_val_array,
                                     new_val_array,
                                     resp_p,
                                     flags,
                                     &op_id,
                                     opcode,
                                     hints,
                                     NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_atomiceattr call", ret);
        error = ret;
    }
    else if (!ret && op_id != -1)
    {
        ret = PVFS_sys_wait(op_id, "atomiceattr", &error);
        if (ret)
        {
             PVFS_perror_gossip("PVFS_sys_wait call", ret);
             error = ret;
        }
        PINT_sys_release(op_id);
    }
    return error;
}

/** Atomically read/write an attribute
 */
PVFS_error PVFS_sys_atomiceattr(PVFS_object_ref ref,
                                const PVFS_credential *credential,
                                PVFS_ds_keyval *key_p,
                                PVFS_ds_keyval *old_val_p,
                                PVFS_ds_keyval *new_val_p,
                                PVFS_sysresp_atomiceattr *resp_p,
                                int32_t flags,
                                int32_t opcode,
                                PVFS_hint hints)
{
    return PVFS_sys_atomiceattr_list(ref,
                                     credential,
                                     1,
                                     key_p,
                                     old_val_p,
                                     new_val_p,
                                     resp_p,
                                     flags,
                                     opcode,
                                     hints);
}


static PINT_sm_action atomic_eattr_setup_msgpair(struct PINT_smcb *smcb,
                                                 job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p;

    assert(sm_p->getattr.attr.mask & PVFS_ATTR_CAPABILITY);
    
    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    PINT_SERVREQ_ATOMICEATTR_FILL(msg_p->req,
                                  sm_p->getattr.attr.capability,
                                  sm_p->object_ref.fs_id,
                                  sm_p->object_ref.handle,
                                  sm_p->object_ref.sid_count,
                                  sm_p->object_ref.sid_array,
                                  sm_p->u.atomiceattr.flags,
                                  sm_p->u.atomiceattr.opcode,
                                  sm_p->u.atomiceattr.nkey,
                                  sm_p->u.atomiceattr.key_array,
                                  sm_p->u.atomiceattr.old_val_array,
                                  sm_p->u.atomiceattr.new_val_array,
                                  sm_p->hints);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->object_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->sid_count = sm_p->object_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->object_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = atomic_eattr_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = 0;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action atomic_eattr_cleanup(struct PINT_smcb *smcb,
                                           job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_CLIENT_DEBUG, 
                 "atomic_eattr state: atomic_eattr_cleanup\n");
    sm_p->error_code  = js_p->error_code;

    PINT_SM_GETATTR_STATE_CLEAR(sm_p->getattr);

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * NOTE: Using GOSSIP_GETEATTR_DEBUG for debugging
 */
static int atomic_eattr_comp_fn(void *v_p,
                                struct PVFS_server_resp *resp_p,
                                int i)
{
    int j = 0;
    int ret = 0;
    int decode_ret;
    PINT_smcb *smcb = v_p;
    PINT_smcb *parent_smcb = smcb->parent_smcb;
    PINT_client_sm *sm_p = PINT_sm_frame(parent_smcb, PINT_MSGPAIR_PARENT_SM);
    PINT_sm_msgpair_state *msg_p;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "get_eattr completion fn: atomic_eattr_comp_fn\n");

    /* only posted one msgpair */
    assert(i == 0);

    /* if this particular request was successful, then store the server
     * response and let the caller sort it out */

    /* recall that the returned val only has buffer and buffer_sz
     * encoded across the wire ... so the buffer_sz is actually the
     * read_sz ... the original buffer_sz is still in the original
     * val struct the user passed in
     */

    if ((sm_p->msgarray_op.msgarray[i].op_status == 0) ||
        (sm_p->msgarray_op.msgarray[i].op_status == -PVFS_ERANGE))
    {
        int k, mink;
        mink = sm_p->u.atomiceattr.nkey;
        if (resp_p->u.atomiceattr.nkey < mink)
        {
            mink = resp_p->u.atomiceattr.nkey;
            gossip_err("Successful call returned fewer values than requested\n");
        }
        if (!resp_p->u.atomiceattr.ret_val)
        {
            gossip_err("Successful call returned NULL value list\n");
            return -1;
        }
        gossip_debug(GOSSIP_GETEATTR_DEBUG,"returned %d values\n",
                sm_p->u.atomiceattr.nkey);
        for (k = 0; k < sm_p->u.atomiceattr.nkey; k++)
        {
            gossip_debug(GOSSIP_GETEATTR_DEBUG,"resp_read_sz = %d\n",
                    resp_p->u.atomiceattr.ret_val[k].read_sz);
            gossip_debug(GOSSIP_GETEATTR_DEBUG,"resp_buff_sz = %d\n",
                    resp_p->u.atomiceattr.ret_val[k].buffer_sz);
            gossip_debug(GOSSIP_GETEATTR_DEBUG,"sm_buff_sz = %d\n",
                    sm_p->u.atomiceattr.resp_p->val_array[k].buffer_sz);
            gossip_debug(GOSSIP_GETEATTR_DEBUG,"resp_buff_ = %s\n",
                    (char *)resp_p->u.atomiceattr.ret_val[k].buffer);
            /* put the error code in its place */
            sm_p->u.atomiceattr.resp_p->err_array[k] =
                                   resp_p->u.atomiceattr.err[k];
            /* put the actual read_sz in its place */
            sm_p->u.atomiceattr.resp_p->val_array[k].read_sz =
                                   resp_p->u.atomiceattr.ret_val[k].buffer_sz;
            /* check for too big a return message */
            if (sm_p->u.atomiceattr.resp_p->val_array[k].read_sz &&
                (sm_p->u.atomiceattr.resp_p->val_array[k].read_sz <=
                        sm_p->u.atomiceattr.resp_p->val_array[k].buffer_sz))
            {
                gossip_debug(GOSSIP_GETEATTR_DEBUG,"copying\n");
                memcpy(sm_p->u.atomiceattr.resp_p->val_array[k].buffer,
                       resp_p->u.atomiceattr.ret_val[k].buffer,
                       sm_p->u.atomiceattr.resp_p->val_array[k].read_sz);
            }
            else /* oops, error! returned too much data */
            {
                gossip_debug(GOSSIP_GETEATTR_DEBUG,"clearing on error\n");
                memset(sm_p->u.atomiceattr.resp_p->val_array[k].buffer,
                       0,
                       sm_p->u.atomiceattr.resp_p->val_array[k].buffer_sz);
                /* record an error, but keep going */
                if (sm_p->u.atomiceattr.resp_p->err_array[k] == 0)
                {
                    sm_p->u.atomiceattr.resp_p->err_array[k] = -PVFS_EMSGSIZE;
                    /* otherwise keep the original error */
                }
            }

            /* not sure if this works in error condition */
            if(resp_p->u.atomiceattr.err[k] == 0)
            {
                /* seems ok - decode the eattrs we know about */
                decode_ret = PINT_eattr_decode(
                        &sm_p->u.atomiceattr.key_array[k],
                        &sm_p->u.atomiceattr.resp_p->val_array[k]);
                if(decode_ret != 0)
                {
                    gossip_debug(GOSSIP_GETATTR_DEBUG, 
                                 "failed decode of eattr: %s\n",
                                 (char *)sm_p->u.atomiceattr.key_array[k].buffer);
                    return decode_ret;
                }
            }
        } 
    }
    else
    {
        ret = sm_p->msgarray_op.msgarray[i].op_status;
    }
    
    /* if this is the last response, check all of the status values
     * and return error code if any requests failed
     */
    if (i == (sm_p->msgarray_op.count - 1))
    {
        foreach_msgpair(&sm_p->msgarray_op, msg_p, j)
        {
            if (msg_p->op_status != 0)
            {
                return(msg_p->op_status);
            }
        }
    }
    return ret;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
