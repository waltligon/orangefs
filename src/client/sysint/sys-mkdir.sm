/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * Changes by Acxiom Corporation to add setgid support
 * Copyright Â© Acxiom Corporation, 2005.
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup sysint
 *
 *  PVFS2 system interface routines for creating a new directory.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "ncache.h"
#include "pvfs2-internal.h"
#include "sid.h"
#include "pvfs2-dist-simple-stripe.h"
#include "dist-dir-utils.h"
#include "client-capcache.h"

enum
{
    MKDIR_RETRY = 180,
    MKDIR_SKIP_EATTR = 181,
    CRDIRENT_RETRY = 182
};

static int mkdir_msg_comp_fn(void *v_p,
                             struct PVFS_server_resp *resp_p,
                             int index);
static int mkdir_crdirent_comp_fn(void *v_p,
                                  struct PVFS_server_resp *resp_p,
                                  int index);
static int mkdir_delete_handle_comp_fn(void *v_p,
                                       struct PVFS_server_resp *resp_p,
                                       int index);

%%

machine pvfs2_client_mkdir_sm
{

/* set up to getattr on parent to find the
 * needed handle info
 */

    state init
    {
        run mkdir_init;
        default => parent_getattr;
    }

    state parent_getattr
    {
        jump pvfs2_client_getattr_sm;
        success => parent_getattr_inspect;
        default => cleanup;
    }

    state parent_getattr_inspect
    {
        run mkdir_parent_getattr_inspect;
        success => mkdir_msg_setup_msgpair;
        default => cleanup;
    }

/* set up to do the mkdir - creates directory
 * object and dirdata objects on the same
 * server (3 steps each) - returns cap to
 * put in cache
 */

    state mkdir_msg_setup_msgpair
    {
        run mkdir_msg_setup_msgpair;
        success => mkdir_msg_xfer_msgpair;
        default => mkdir_msg_failure;
    }

    state mkdir_msg_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => mkdir_setattr_setup_msgpair;
        default => mkdir_msg_failure;
    }

    state mkdir_msg_failure
    {
        run mkdir_msg_failure;
        default => cleanup;
    }

/* This sends setattrs to all remote dirdatas
 * I don't think we want to do this any more.
 */
/* change the setattr timestamp - why is this not
 * handled during the servers mkdir.sm?  This can
 * create dirdatas on servers other than the one above
 */

    state mkdir_setattr_setup_msgpair
    {
        run mkdir_setattr_setup_msgpair;
        success => mkdir_setattr_xfer_msgpair;
        default => mkdir_setattr_failure;
    }

    state mkdir_setattr_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => mkdir_crdirent_setup_msgpair;
        default => mkdir_setattr_failure;
    }

    state mkdir_setattr_failure
    {
        run mkdir_setattr_failure;
        default => delete_handle_setup_msgpair;
    }

/* last step create the dirent 
 */

    state mkdir_crdirent_setup_msgpair
    {
        run mkdir_crdirent_setup_msgpair;
        success => mkdir_crdirent_xfer_msgpair;
        default => mkdir_crdirent_failure;
    }

    state mkdir_crdirent_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => mkdir_crdirent_failure;
    }

/* these are retrys and undos in case of failure */

    state mkdir_crdirent_failure
    {
        run mkdir_crdirent_failure;
        success => mkdir_crdirent_retry_getattr;
        default => delete_handle_setup_msgpair;
    }

    state mkdir_crdirent_retry_getattr
    {
        jump pvfs2_client_getattr_sm;
        success => mkdir_crdirent_setup_msgpair;
        default => mkdir_crdirent_failure;
    }   
    
    state delete_handle_setup_msgpair
    {
        run mkdir_delete_handle_setup_msgpair;
        success => delete_handle_xfer_msgpair;
        default => cleanup;
    }

    state delete_handle_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

/* final cleanup */

    state cleanup
    {
        run mkdir_cleanup;
        MKDIR_RETRY => init;
        default => terminate;
    }
}

%%

/** Initiate creation of a new directory.
 */
PVFS_error PVFS_isys_mkdir(char *object_name,
                           PVFS_object_ref parent_ref,
                           PVFS_sys_attr attr,
                           const PVFS_credential *credential,
                           PVFS_sysresp_mkdir *resp,
                           PVFS_sys_op_id *op_id,
                           PVFS_hint hints,
                           void *user_ptr)
{
    PVFS_error ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;
    struct server_configuration_s *server_config = NULL;
    struct filesystem_configuration_s *fs_config = NULL;
    PVFS_object_attr *dir_attr = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_mkdir entered\n");
   
    if (!PVFS_OID_cmp(&parent_ref.handle, &PVFS_HANDLE_NULL) ||
        (parent_ref.fs_id == PVFS_FS_ID_NULL) ||
        (object_name == NULL) || (resp == NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
        return ret;
    }

    /* check to make sure all expected attributes are present */
    if ((attr.mask & PVFS_ATTR_SYS_MKDIR_REQUIRED) != PVFS_ATTR_SYS_MKDIR_REQUIRED)
    {
        gossip_lerr("PVFS_isys_mkdir() failure: invalid attribute mask %ld, "
                    "expected SYS_MKDIR_RREQUIRED (%ld)\n",
                    attr.mask, PVFS_ATTR_SYS_MKDIR_REQUIRED);
        return ret;
    }

    if ((strlen(object_name) + 1) > PVFS_REQ_LIMIT_SEGMENT_BYTES)
    {
        return -PVFS_ENAMETOOLONG;
    }

#ifndef ENABLE_SECURITY_CERT
    /* if owner/group differ from credential values, and credential is
       not for root, create with owner/group equal to credential values
       (in cert. mode the credential fields aren't used) */
    if (attr.owner != credential->userid &&
        credential->userid != 0)
    {
        gossip_debug(GOSSIP_CREATE_DEBUG, "Replacing owner uid %d with %d "
                     "on create\n", attr.owner, credential->userid);
        attr.owner = credential->userid;
    }

    if (attr.group != credential->group_array[0] &&
        credential->group_array[0] != 0)
    {
        gossip_debug(GOSSIP_CREATE_DEBUG, "Replacing group gid %d with %d "
                     "on create\n", attr.group, credential->group_array[0]);
        attr.group = credential->group_array[0];
    }
#endif

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir Allocating SMCB\n\n");
    PINT_smcb_alloc(&smcb,
                    PVFS_SYS_MKDIR,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);
    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }
    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, parent_ref.fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);
    sm_p->u.mkdir.mkdir_resp = resp;
    sm_p->u.mkdir.object_name = object_name;
    dir_attr = &sm_p->u.mkdir.dir_attr;

    /*
     * I really hate sys_attr's - I would really rather convert them to
     * object_attr's right here and then work on with those.  Same for
     * returning attrs- convert them right before returning if that's
     * possible - tricky because of return struct we use.
     */
    
    /* COPY the user provided attributes into the sys_attr sm block */
    PVFS_util_copy_sys_attr(&sm_p->u.mkdir.sys_attr, &attr);

    sm_p->u.mkdir.stored_error_code = 0;
    sm_p->u.mkdir.retry_count = 0;

    gossip_debug(GOSSIP_CREATE_DEBUG, "mkdir Adding hints\n\n");
    PVFS_hint_copy(hints, &sm_p->hints);
    PVFS_hint_add(&sm_p->hints,
                  PVFS_HINT_HANDLE_NAME,
                  sizeof(PVFS_handle),
                  &parent_ref.handle);

    sm_p->parent_ref = parent_ref;

    /* We will start building attributes for the new directory object
     * In this function we will add attributes to sm_p->u.mkdir.dir_attr
     * first from the built-in defaults, second from config file defaults,
     * In the validate function - after we have read the parent attributes
     * we continue with third from the parent directory attributes and hints,
     * and finally from the sys_attrs passed in to the sys_mkdir call.
     */

    /*********************/
    /* Built-in defaults */
    /*********************/

    /* General attributes */
    dir_attr->objtype = PVFS_TYPE_DIRECTORY;
    dir_attr->mask |= PVFS_ATTR_COMMON_TYPE;
    dir_attr->meta_sid_count = 1;
    dir_attr->mask |= PVFS_ATTR_COMMON_SID_COUNT;
    dir_attr->u.dir.dirent_count = 0;
    dir_attr->mask |= PVFS_ATTR_DIR_DIRENT_COUNT;
    /* Hints pertaining to files - none are present by default */
    dir_attr->u.dir.hint.dist_name_len = 0;
    dir_attr->u.dir.hint.dist_name = NULL;
    dir_attr->u.dir.hint.dist_params_len = 0;
    dir_attr->u.dir.hint.dist_params = NULL;
    dir_attr->u.dir.hint.dfile_count = 0;
    dir_attr->u.dir.hint.dfile_sid_count = 0;
    dir_attr->u.dir.hint.layout.algorithm = PVFS_SYS_LAYOUT_ROUND_ROBIN;
    dir_attr->u.dir.hint.layout.server_list.count = 0;
    dir_attr->u.dir.hint.layout.server_list.bufsize = 0;
    dir_attr->u.dir.hint.layout.server_list.servers = NULL;
    /* Hints pertaining to directories - none are present by default */
    dir_attr->u.dir.hint.dir_dirdata_min = 0;
    dir_attr->u.dir.hint.dir_dirdata_max = 0;
    dir_attr->u.dir.hint.dir_split_size = 0;
    dir_attr->u.dir.hint.dir_layout.algorithm = PVFS_SYS_LAYOUT_ROUND_ROBIN;
    dir_attr->u.dir.hint.dir_layout.server_list.count = 0;
    dir_attr->u.dir.hint.dir_layout.server_list.bufsize = 0;
    dir_attr->u.dir.hint.dir_layout.server_list.servers = NULL;
    /* Distributed Directory Attributes */
    dir_attr->u.dir.dist_dir_attr.tree_height = 0;
    dir_attr->mask |= PVFS_ATTR_DIR_TREE_HEIGHT;
    dir_attr->u.dir.dist_dir_attr.dirdata_min = 1;
    dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_MIN;
    dir_attr->u.dir.dist_dir_attr.dirdata_max = 1;
    dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_MAX;
    dir_attr->u.dir.dist_dir_attr.dirdata_count = 1;  /* this is really initial */
    dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_COUNT;
    dir_attr->u.dir.dist_dir_attr.sid_count = 1;      /* I think this is obsolete */
    dir_attr->mask |= PVFS_ATTR_DIR_SID_COUNT;
    dir_attr->u.dir.dist_dir_attr.bitmap_size = 0;    /* bitmap set up on server */
    dir_attr->mask |= PVFS_ATTR_DIR_BITMAP_SIZE;
    dir_attr->u.dir.dist_dir_attr.split_size = 8192;
    dir_attr->mask |= PVFS_ATTR_DIR_SPLIT_SIZE;
    dir_attr->u.dir.dist_dir_attr.server_no = -1;     /* overridden on server */
    dir_attr->mask |= PVFS_ATTR_DIR_SERVER_NO;
    dir_attr->u.dir.dist_dir_attr.branch_level = -1;  /* branch level set up on server */
    dir_attr->mask |= PVFS_ATTR_DIR_BRANCH_LEVEL;

    /*********************************/
    /* Defaults from the config file */
    /*********************************/

    /* get config for this filesystem */
    server_config = PINT_get_server_config_struct(parent_ref.fs_id);
    fs_config = PINT_config_find_fs_id(server_config, parent_ref.fs_id);

    if (fs_config->default_distr_dir_servers_initial > 0)
    {
        dir_attr->u.dir.dist_dir_attr.dirdata_min = 
        dir_attr->u.dir.dist_dir_attr.dirdata_count = 
                         fs_config->default_distr_dir_servers_initial;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_MIN;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_COUNT;
    }
    if (fs_config->default_distr_dir_servers_max > 0)
    {
        dir_attr->u.dir.dist_dir_attr.dirdata_max = 
                         fs_config->default_distr_dir_servers_max;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_MAX;
    }
    if (fs_config->default_distr_dir_split_size > 100)
    {
        dir_attr->u.dir.dist_dir_attr.split_size = fs_config->default_distr_dir_split_size;
        dir_attr->mask |= PVFS_ATTR_DIR_SPLIT_SIZE;
    }
    if (fs_config->metadata_replication_factor > 0)
    {
        dir_attr->meta_sid_count = fs_config->metadata_replication_factor;
        dir_attr->mask |= PVFS_ATTR_COMMON_SID_COUNT;
    }

    /* return checked out verion of config struct */
    PINT_put_server_config_struct(server_config);

    /* does this apply to a dir?  if so, shouldn't we have attrs for it? */
    /* TODO: For now, just use round robin layout. */
    sm_p->u.mkdir.layout.algorithm = PVFS_SYS_LAYOUT_ROUND_ROBIN;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "Creating directory named %s "
                 "under parent handle %s on fs %d\n", object_name,
                 PVFS_OID_str(&parent_ref.handle), parent_ref.fs_id);

    /* Start the mkdir state machine */
    return PINT_client_state_machine_post(smcb, op_id, user_ptr);
}

/** Create a new directory.
 */
PVFS_error PVFS_sys_mkdir(char *object_name,
                          PVFS_object_ref parent_ref,
                          PVFS_sys_attr attr,
                          const PVFS_credential *credential,
                          PVFS_sysresp_mkdir *resp,
                          PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_mkdir entered\n");

    ret = PVFS_isys_mkdir(object_name,
                          parent_ref,
                          attr,
                          credential,
                          resp,
                          &op_id,
                          hints,
                          NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_mkdir call", ret);
        error = ret;
    }
    else if (!ret && op_id != -1)
    {
        ret = PVFS_sys_wait(op_id, "mkdir", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
        PINT_sys_release(op_id);
    }
    return error;
}

/* ======================== COMPLETION FUNCTIONS ========================= */

static int mkdir_msg_comp_fn(void *v_p,
                             struct PVFS_server_resp *resp_p,
                             int index)
{
    PINT_smcb *smcb = v_p;
    PINT_smcb *parent_smcb = smcb->parent_smcb;
    PINT_client_sm *sm_p = PINT_sm_frame(parent_smcb, PINT_MSGPAIR_PARENT_SM);
    int ret;
    PVFS_uid local_uid;
    
    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir_msg_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_MKDIR);

    if (resp_p->status != 0)
    {
        return resp_p->status;
    }

    PINT_debug_capability(&resp_p->u.mkdir.capability, "mkdir returned");
    PINT_copy_capability(&resp_p->u.mkdir.capability, &sm_p->u.mkdir.capability);

    /* get local uid for indexing */
    local_uid = PINT_HINT_GET_LOCAL_UID(sm_p->hints);
    if (local_uid == (PVFS_uid) -1)
    {
        local_uid = PINT_util_getuid();

        PVFS_hint_add(&sm_p->hints, PVFS_HINT_LOCAL_UID_NAME,
                      sizeof(PVFS_uid), &local_uid);
    }
    else  /* (local_uid != (PVFS_uid) -1) */
    {
        ret = PINT_client_capcache_update(sm_p->object_ref,
                  local_uid, &resp_p->u.mkdir.capability);
        gossip_debug(GOSSIP_SECURITY_DEBUG, "%s: "
                     "PINT_client_capcache_update returned %d\n",
                     __func__, ret);
    }

    /* WBL - REVIEW this - can we update attr without size array?
     * can we avoid the following invalidation - what are the
     * consequences of being a little out of date?  how much
     * performance do we lose?  Can we pass new timestamps back
     * so we can update cache rather then invalidate?  Is this the right
     * place to invalidate anyway, this is the return of the mkdir not the
     * crdirent, which would have updated the parent's stimestamp.
     * WBL - at this point in time the dir has 0 dirents because it was
     * just created.  We should be able to update attrs.
     * The crdirent should update a timestamp on the parent, but that
     * is not reflected on this object.
     */

#if 0 /* Don't cache size_array. */
    PINT_acache_update(sm_p->object_ref, &attr, NULL, NULL);
#endif

    /* invalidate the acache entry for the parent object, since a successful
     * mkdir has now changed the timestamps on the parent's dirdata handle, 
     * invalidating the timestamps stored with the parent.
     */
    PINT_acache_invalidate(sm_p->object_ref);

    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "*** Got newly created dir handle %s\n",
                 PVFS_OID_str(sm_p->u.mkdir.metadata_handle));

    return 0;
}

static int mkdir_crdirent_comp_fn(void *v_p,
                                  struct PVFS_server_resp *resp_p,
                                  int index)
{
    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir_crdirent_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_CRDIRENT);
    return resp_p->status;
}

static int mkdir_delete_handle_comp_fn(void *v_p,
                                       struct PVFS_server_resp *resp_p,
                                       int index)
{
    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir_delete_handle_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_REMOVE);
    return resp_p->status;
}

/* <================= STATE ACTION FUNCTIONS ====================> */

static PINT_sm_action mkdir_init(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t tmp_id;

    assert((js_p->error_code == 0) ||
           (js_p->error_code == MKDIR_RETRY));

    /* set up to read the attributes of the parent,
     * which must be a directory
     */
    PINT_SM_GETATTR_STATE_FILL(
                    sm_p->getattr,
                    sm_p->parent_ref,
                    (PVFS_ATTR_COMMON_NOTIME | PVFS_ATTR_DIR_HINT |
                         PVFS_ATTR_CAPABILITY | PVFS_ATTR_DISTDIR_ATTR), 
                     PVFS_TYPE_DIRECTORY,
                    0);

    if (js_p->error_code == MKDIR_RETRY)
    {
        js_p->error_code = 0;

        return job_req_sched_post_timer(sm_p->msgarray_op.params.retry_delay,
                                        smcb,
                                        0,
                                        js_p,
                                        &tmp_id,
                                        pint_client_sm_context);
    }

    return SM_ACTION_COMPLETE;
}

/** looks at the attributes of the parent directory and decides if it impacts
 *  the mkdir in any way
 *
 *  Determine the number of dirdata files and sids involved, which may be
 *  impacted by the parent dir attrs
 */
static PINT_sm_action mkdir_parent_getattr_inspect(struct PINT_smcb *smcb,
                                                   job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *p_attr = NULL;
    PVFS_object_attr *dir_attr = NULL;
    PVFS_sys_attr *sys_attr = NULL;
    int32_t distr_dir_servers_initial_requested = 0;
    int32_t distr_dir_servers_max_requested = 0;
    int32_t distr_dir_split_size_requested = 0;
    /* remove this with lost error check below
    int ret = 0; */

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: parent_getattr_inspect\n");

    /*
     * The getattr leaves the attributes (obj) of the parent in sm_p->getattr.attr
     * Attributes (sys) for the mkdir request constructed in sm_p->u.mkdir.sys_attr
     * Attributes (obj) in sm_p->u.mkdir.dir_attr will be passed to the server
     * We need to complete the attributes using parent attributes and user
     * attributes including hints, and meta_sid_count
     */

    p_attr = &sm_p->getattr.attr;       /* parent attributes */
    assert(p_attr);
    dir_attr = &sm_p->u.mkdir.dir_attr; /* new dir attributes */
    assert(dir_attr);
    sys_attr = &sm_p->u.mkdir.sys_attr;   /* system attributes from user */
    assert(sys_attr);

    DEBUG_attr_mask(p_attr->mask);
    DEBUG_attr_mask(sys_attr->mask);
    DEBUG_attr_mask(dir_attr->mask);

    distr_dir_servers_initial_requested = sys_attr->distr_dir_servers_initial;
    distr_dir_servers_max_requested = sys_attr->distr_dir_servers_max;
    distr_dir_split_size_requested = sys_attr->distr_dir_split_size;

    gossip_debug(GOSSIP_MKDIR_DEBUG,
        "parent owner: %d, group: %d, perms: %d, dirdata_count: %d\n",
        (int)p_attr->owner, (int)p_attr->group, (int)p_attr->perms,
        p_attr->u.dir.dist_dir_attr.dirdata_count);

    PINT_debug_capability(&sm_p->getattr.attr.capability,
                          "mkdir_parent_getattr_inspect");

    PINT_debug_dist_dir_handles(GOSSIP_CLIENT_DEBUG, p_attr->u.dir.dist_dir_attr,
                                p_attr->u.dir.dirdata_handles);

    /* do we have a setgid bit? */
    if(p_attr->perms & PVFS_G_SGID)
    {
        gossip_debug(GOSSIP_MKDIR_DEBUG, "parent has setgid bit set.\n");
        gossip_debug(GOSSIP_MKDIR_DEBUG,
                     " - modifying requested attr for new file.\n");
        sys_attr->group = p_attr->group;
        sys_attr->perms |= PVFS_G_SGID;
        /* note that permission checking is left to server even in this case */
    }

    /* set up redundancy defaults */
#if 0
    if (sys_attr->meta_sid_count == 0)
    {
        sys_attr->meta_sid_count
        sm_p->u.mkdir.metadata_sid_count
        p_attr->meta_sid_count;
    }
#endif

    /* Priority for new directory object attributes such as:
     * number of data files / distributed directory parameters,
     * 1) values passed into sys_mkdir
     * 2) directory hints 
     * 3) inherit parent attributes
     * 4) mount options (not yet implemented)  -- N/A
     * 5) config file defaults                 -- DONE in isys_mkdir
     * 6) system default (compiled in limits)  -- DONE in isys_mkdir
     */

    /*******************************/
    /* Parent inherits/hints */
    /*******************************/
#define SET_DIR_ATTR_FROM_PARENT(attr, mbit)                                    \
    if (((p_attr->attr) > 0) && PVFS2_attr_all(p_attr->mask, (mbit)))           \
    {                                                                           \
        dir_attr->attr = p_attr->attr;                                          \
        dir_attr->mask |= mbit;                                                 \
        gossip_debug(GOSSIP_MKDIR_DEBUG, "Add attr %ld\n", mbit);               \
    }

    /* General attributes - inherit */
    SET_DIR_ATTR_FROM_PARENT(meta_sid_count, PVFS_ATTR_COMMON_SID_COUNT);
    /* Hints pertaining to files - inherit */
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dist_name_len, PVFS_ATTR_DIR_HINT_DIST_NAME_LEN);
    if (0 < p_attr->u.dir.hint.dist_name_len)
    {
        dir_attr->u.dir.hint.dist_name = strdup(p_attr->u.dir.hint.dist_name);
    }
    else
    {
        dir_attr->u.dir.hint.dist_name = NULL;
    }
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dist_params_len,
                             PVFS_ATTR_DIR_HINT_DIST_PARAMS_LEN);
    if (0 < p_attr->u.dir.hint.dist_params_len)
    {
        dir_attr->u.dir.hint.dist_params = strdup(p_attr->u.dir.hint.dist_params);
    }
    else
    {
        dir_attr->u.dir.hint.dist_params = NULL;
    }
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dfile_count,
                             PVFS_ATTR_DIR_HINT_DFILE_COUNT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dfile_sid_count,
                             PVFS_ATTR_DIR_HINT_SID_COUNT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.layout.algorithm, PVFS_ATTR_DIR_HINT_LAYOUT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.layout.server_list.count,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.layout.server_list.bufsize,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.layout.server_list.servers,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    /* Hints pertaining to directories - inherit and apply */
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_dirdata_min,
                             PVFS_ATTR_DIR_HINT_DIRDATA_MIN);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_dirdata_max,
                             PVFS_ATTR_DIR_HINT_DIRDATA_MAX);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_split_size,
                             PVFS_ATTR_DIR_HINT_SPLIT_SIZE);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_layout.algorithm,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_layout.server_list.count,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_layout.server_list.bufsize,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.hint.dir_layout.server_list.servers,
                             PVFS_ATTR_DIR_HINT_LAYOUT);
    /* Distributed Directory Attributes - inherit */
    SET_DIR_ATTR_FROM_PARENT(u.dir.dist_dir_attr.dirdata_min, 
                             PVFS_ATTR_DIR_DIRDATA_MIN);
    SET_DIR_ATTR_FROM_PARENT(u.dir.dist_dir_attr.dirdata_max, 
                             PVFS_ATTR_DIR_DIRDATA_MAX);
    SET_DIR_ATTR_FROM_PARENT(u.dir.dist_dir_attr.dirdata_count, 
                             PVFS_ATTR_DIR_DIRDATA_COUNT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.dist_dir_attr.sid_count, 
                             PVFS_ATTR_DIR_SID_COUNT);
    SET_DIR_ATTR_FROM_PARENT(u.dir.dist_dir_attr.split_size, PVFS_ATTR_DIR_SPLIT_SIZE);
    dir_attr->u.dir.dist_dir_attr.server_no = 0;
    /* tree height, bitmap size and branch level are computed on server */

    /* Apply directory hints after inheriting attributes */
    if ((p_attr->u.dir.hint.dir_dirdata_min > 0) && 
        (p_attr->u.dir.hint.dir_dirdata_max >= p_attr->u.dir.hint.dir_dirdata_min) && 
        PVFS2_attr_all(p_attr->mask, PVFS_ATTR_DIR_HINT_DIRDATA_MIN) &&
        PVFS2_attr_all(p_attr->mask, PVFS_ATTR_DIR_HINT_DIRDATA_MAX))
    {
        dir_attr->u.dir.dist_dir_attr.dirdata_min = p_attr->u.dir.hint.dir_dirdata_min;
        dir_attr->u.dir.dist_dir_attr.dirdata_count = p_attr->u.dir.hint.dir_dirdata_min;
        dir_attr->u.dir.dist_dir_attr.dirdata_max = p_attr->u.dir.hint.dir_dirdata_max;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_MIN;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_MAX;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_COUNT;
    }
    if ((p_attr->u.dir.hint.dir_split_size > 0) && 
        PVFS2_attr_all(p_attr->mask, PVFS_ATTR_DIR_HINT_SPLIT_SIZE))
    {
        dir_attr->u.dir.dist_dir_attr.split_size = p_attr->u.dir.hint.dir_split_size;
        dir_attr->mask |= PVFS_ATTR_DIR_SPLIT_SIZE;
    }
#undef SET_DIR_ATTR_FROM_PARENT

    /***********************************/
    /* User provided attributes */
    /***********************************/

    /* this process assumes that the masks for the sys_attr and the obj_attr are
     * the same.  This was not true in pre-V3
     */
#define SET_DIR_ATTR_FROM_USER(dattr, mbit, sattr)                              \
    if ((sys_attr->sattr) > 0 && PVFS2_attr_all(sys_attr->mask, (mbit)))        \
    {                                                                           \
        dir_attr->dattr = sys_attr->sattr;                                      \
        dir_attr->mask |= mbit;                                                 \
        gossip_debug(GOSSIP_MKDIR_DEBUG, "Add attr %ld\n", mbit);               \
    }

    /* General attributes */
    SET_DIR_ATTR_FROM_USER(owner,
                           PVFS_ATTR_COMMON_UID,
                           owner);
    SET_DIR_ATTR_FROM_USER(group,
                           PVFS_ATTR_COMMON_GID,
                           group);
    SET_DIR_ATTR_FROM_USER(perms,
                           PVFS_ATTR_COMMON_PERM,
                           perms);
    /* Hints pertaining to files - inherit */
    SET_DIR_ATTR_FROM_USER(u.dir.hint.dfile_sid_count, /*  ??????  */
                           PVFS_ATTR_DIR_HINT_SID_COUNT,
                           mirror_copies_count);
    /* sys_attr->dist_name is a string, not a full struct */
    if (sys_attr->dist_name && PVFS2_attr_all(sys_attr->mask,
                                              PVFS_ATTR_DIR_HINT_DIST_NAME_LEN))
    {
        int namelen = strlen(sys_attr->dist_name);
        dir_attr->u.dir.hint.dist_name_len = namelen;
        dir_attr->u.dir.hint.dist_name = strndup(sys_attr->dist_name, namelen);
        dir_attr->mask |= PVFS_ATTR_DIR_HINT_DIST_NAME_LEN;
    }
    /* sys_attr->dist_params is a string, not a full struct */
    if (sys_attr->dist_params && PVFS2_attr_all(sys_attr->mask,
                                                PVFS_ATTR_DIR_HINT_DIST_PARAMS_LEN))
    {
        int paramslen = strlen(sys_attr->dist_params);
        dir_attr->u.dir.hint.dist_params_len = paramslen;
        dir_attr->u.dir.hint.dist_params = strndup(sys_attr->dist_params, paramslen);
        dir_attr->mask |= PVFS_ATTR_DIR_HINT_DIST_PARAMS_LEN;
    }
    /* Hints pertaining to directories */
    /* Distributed Directory Attributes  - set directly */

    /* should we check MIN, MAX, and SPLIT_SIZE, or allow override of individual
     * parameters?  We could check for existing params - from parent - but that makes
     * for complicated logic!
     */
    if ((0 < sys_attr->distr_dir_servers_initial) &&
        (sys_attr->distr_dir_servers_max >= sys_attr->distr_dir_servers_initial) &&
        PVFS2_attr_all(sys_attr->mask, (PVFS_ATTR_DIR_DIRDATA_MIN | 
                                        PVFS_ATTR_DIR_DIRDATA_MAX)))
    {
        SET_DIR_ATTR_FROM_USER(u.dir.dist_dir_attr.dirdata_min, 
                               PVFS_ATTR_DIR_DIRDATA_MIN,
                               distr_dir_servers_initial);
        SET_DIR_ATTR_FROM_USER(u.dir.dist_dir_attr.dirdata_max, 
                               PVFS_ATTR_DIR_DIRDATA_MAX,
                               distr_dir_servers_max);
        SET_DIR_ATTR_FROM_USER(u.dir.dist_dir_attr.split_size,
                               PVFS_ATTR_DIR_SPLIT_SIZE,
                               distr_dir_split_size);
        dir_attr->u.dir.dist_dir_attr.dirdata_count =
                               dir_attr->u.dir.dist_dir_attr.dirdata_min;
        dir_attr->mask |= PVFS_ATTR_DIR_DIRDATA_COUNT;
    }
    /* tree height, bitmap size and branch level are computed in next state */
#undef SET_DIR_ATTR_FROM_USER

    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "Setting distributed directory initial "
                 "servers to %d [requested %d]\n",
                 dir_attr->u.dir.dist_dir_attr.dirdata_min,
                 distr_dir_servers_initial_requested);
    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "Setting distributed directory max "
                 "servers to %d [requested %d]\n",
                 dir_attr->u.dir.dist_dir_attr.dirdata_max,
                 distr_dir_servers_max_requested);
    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "Setting distributed directory split size "
                 "to %d [requested %d]\n",
                 dir_attr->u.dir.dist_dir_attr.split_size,
                 distr_dir_split_size_requested);

    DEBUG_attr_mask(dir_attr->mask);

    return SM_ACTION_COMPLETE;
}

/*
 * setup message pair for the mkdir request
 */
static PINT_sm_action mkdir_msg_setup_msgpair(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    int i = 0;
    PINT_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "mkdir state: mkdir_msg_setup_msgpair\n");

    js_p->error_code = 0;

    gossip_debug(GOSSIP_MKDIR_DEBUG," mkdir: posting mkdir req, "
                                    "[distr_dir_servers_initial=%d]\n", 
                                    sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_min);

    /* Allocate OIDs and SIDs for a directory.
     * There is one OID for the metadata, and n OIDs for the dirdata
     * and each OID has multiple SIDs.
     *
     * Note that we go ahead and create distr_dir_servers_max OIDs even
     * though initially we may only distribute to distr_dir_servers_initial
     * of them.
     *
     * We send this request to one meta server, which in turn sends it
     * to the other meta servers.
     */
    /* V3 TODO - Do we want to skip oid allocation if this
     *           is a retry? - YES, I think so!
     */
    ret = PVFS_OBJ_gen_dir(sm_p->parent_ref.fs_id,
                           &sm_p->u.mkdir.metadata_handle,
                           sm_p->u.mkdir.dir_attr.meta_sid_count, /* in */
                           &sm_p->u.mkdir.metadata_sid_array,
                           sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_max, /* in */
                           &sm_p->u.mkdir.dirdata_handles,
                           sm_p->u.mkdir.dir_attr.meta_sid_count, /* in */ /* DUP */
                           &sm_p->u.mkdir.dirdata_sid_array);
    if(ret != 0)
    {
        gossip_err("Failed to generate OIDs and SIDs for new directory\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    gossip_debug(GOSSIP_MKDIR_DEBUG,
                     "mkdir selected meta server: %s,\ndirdata servers:\n",
                     PVFS_OID_str(sm_p->u.mkdir.metadata_handle));

    for (i = 0; i < sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_max; i++)
    {
        gossip_debug(GOSSIP_MKDIR_DEBUG, "\t%s\n",
                     PVFS_OID_str(&sm_p->u.mkdir.dirdata_handles[i]));
    }

    /* object ref will now refer to newly created metadata object */
    sm_p->object_ref.handle    = *sm_p->u.mkdir.metadata_handle;
    sm_p->object_ref.fs_id     = sm_p->parent_ref.fs_id;
    sm_p->object_ref.sid_count = sm_p->u.mkdir.dir_attr.meta_sid_count;
    sm_p->object_ref.sid_array = sm_p->u.mkdir.metadata_sid_array;

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    /* WHY?  Why do we copy all of this from the attr to the req, only to copy it
     * back on the server?  Why not just move it all in the attr?
     */
    PINT_SERVREQ_MKDIR_FILL(msg_p->req,
                            sm_p->getattr.attr.capability,
                            *sm_p->cred_p,
                            sm_p->u.mkdir.dir_attr,
                            sm_p->parent_ref.fs_id,
                            *sm_p->u.mkdir.metadata_handle, /* object */
                            sm_p->u.mkdir.dir_attr.meta_sid_count, /* redundant */
                            sm_p->u.mkdir.metadata_sid_array,
                            &sm_p->parent_ref.handle, /* back ptr */
                            sm_p->parent_ref.sid_array,
                            sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_max, /* redundant */
                            sm_p->u.mkdir.dirdata_handles,
                            sm_p->u.mkdir.dir_attr.meta_sid_count, /* dirdata */ /* redundant */
                            sm_p->u.mkdir.dirdata_sid_array,
                            sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_min, /* redundant */
                            sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.split_size, /* redundant */
                            sm_p->hints);

    /* after setting up the request, zero out the handle and sid counts in the attr
     * we don't send lists of oids and sids in the attr, but in the req.  On the
     * other side we need to remember to put everything back
     */
    msg_p->req.u.mkdir.attr.parent = NULL;
    msg_p->req.u.mkdir.attr.parent_sids = NULL;
    msg_p->req.u.mkdir.attr.meta_sid_count = 0;
    msg_p->req.u.mkdir.attr.u.dir.dirdata_handles = NULL;
    msg_p->req.u.mkdir.attr.u.dir.dirdata_sids = NULL;
    msg_p->req.u.mkdir.attr.u.dir.dist_dir_attr.dirdata_count = 0;
    msg_p->req.u.mkdir.attr.u.dir.dist_dir_attr.sid_count = 0;
    msg_p->req.u.mkdir.attr.u.dir.dist_dir_attr.bitmap_size = 0;
    /* now fill in various msg_p fields */
    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    //dirdata_attr.u.dirdata.dist_dir_attr.dirdata_count = sm_p->u.mkdir.dirdata_count;
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = *sm_p->u.mkdir.metadata_handle; /* collapse into object_ref */
    /* V3 this assumes fan out from client */
    msg_p->sid_count = sm_p->u.mkdir.dir_attr.meta_sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->u.mkdir.metadata_sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = mkdir_msg_comp_fn;

    PVFS_debug_servreq_mkdir(GOSSIP_MKDIR_DEBUG, &(msg_p->req.u.mkdir));

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);
    if (ret < 0)
    {
        gossip_err("PVFS_sys_mkdir: failed to look up SID\n");
        /* V3 how to handle failure here ?
         * If we have to do a SID lookup we need to have SM block on
         * that action, or call a nested SM or something
         *
         * Should return a SM error code, call a lookup SM, then resume
         */
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_msg_failure(struct PINT_smcb *smcb,
                                        job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    sm_p->u.mkdir.stored_error_code = js_p->error_code;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: mkdir_msg_failure\n");
    return SM_ACTION_COMPLETE;
}

/* This sends setattrs to all of the new remote dirdata,
 * which will create them and update their metadata
 */
/* send a setattr to each new dirdata to set up data */
static PINT_sm_action mkdir_setattr_setup_msgpair(struct PINT_smcb *smcb,
                                                  job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i = 0;
    PINT_sm_msgpair_state *msg_p = NULL;
    int ret = -PVFS_EINVAL;
    PVFS_object_attr dirdata_attr;

    /* NOTE: any memory allocated here will be free'd in the cleanup function */

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: setattr_setup_msgpair\n");

    memset(&dirdata_attr, 0, sizeof(PVFS_object_attr));

    /* this copies the attr created for the mkdir request to be modified
     * and used in the upcomming setattr call
     * Do we NEED to make this copy?   Is the src used anywhere after this?
     */
    PINT_copy_object_attr(&dirdata_attr, &sm_p->u.mkdir.dir_attr);

    dirdata_attr.objtype = PVFS_TYPE_DIRDATA; /* this is mkdir,targets are dirdata */

    /* assume all valid dirdata attrs since we are creating a dirdata */
    dirdata_attr.mask = PVFS_ATTR_DIRDATA_ALL | PVFS_ATTR_COMMON_ALL;

//    ret = PINT_copy_dist_dir_attr(&dirdata_attr.u.dirdata.dist_dir_attr,
//                                  &sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr);

    PINT_init_dist_dir_state(&dirdata_attr.u.dirdata.dist_dir_attr,
                             &dirdata_attr.u.dirdata.dist_dir_bitmap, /* malloc'd */
                             sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_count,
                             sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.sid_count,
                             0,
                             sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_max,
                             sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.split_size
                            );

    /* these are not handled in above func */
    dirdata_attr.u.dirdata.dist_dir_attr.dirdata_max =
              sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_max;
    dirdata_attr.u.dirdata.dist_dir_attr.dirdata_min =
              sm_p->u.mkdir.dir_attr.u.dir.dist_dir_attr.dirdata_min;

    //PINT_dist_dir_set_serverno(0, &dirdata_attr.u.dirdata.dist_dir_attr,
    ///                             dirdata_attr.u.dirdata.dist_dir_bitmap);

    /* since we are doing mkdir, and these are remote dirdatas, we know
     * the objects don't exist yet, so we aren't really doing setattrs, we're
     * doing create dirdata objects.  prelude will create the objects before the
     * setattr but then there really isnt anything for the setattr code to do.  */ /* we just copied the attr in s_op, which included copying these two arrays
     * if they exist (should exist) and now copying another pointer on top?
     * maybe these pointers are null in the attr
     */
    dirdata_attr.u.dirdata.dirdata_handles = sm_p->u.mkdir.dirdata_handles;
    dirdata_attr.u.dirdata.dirdata_sids = sm_p->u.mkdir.dirdata_sid_array;

    dirdata_attr.parent = sm_p->u.mkdir.metadata_handle;
    dirdata_attr.parent_sids = sm_p->u.mkdir.metadata_sid_array;

    ret = PINT_msgpairarray_init(&sm_p->msgarray_op,
                                 sm_p->u.mkdir.dir_attr.meta_sid_count);
    if (ret != 0)
    {
        gossip_err("mkdir: setattr failed to initialize %d msgpairs\n",
                   sm_p->u.mkdir.dir_attr.meta_sid_count);
        js_p->error_code = ret;
        return(SM_ACTION_COMPLETE);
    }

    /* send a msgpair for each dirdata */
    /* should we send as a batch, or multiple singles? */
    foreach_msgpair(&sm_p->msgarray_op, msg_p, i)
    {
        /* need to set dirdata_attr->u.dir.dist_dir_attr.server_no to i 
         * this is ok because this FILL macro copies the attributes
         */
        dirdata_attr.u.dir.dist_dir_attr.server_no = i;
        /* we need a second attr for the parent, in case the target doesn't
         * exist yet.  Problem is I'm not sure where that comes from each time
         * during a create or mkdir it should be fine because we just created
         * parent and so we have this info at hand.  Normally, I'm not sure.
         * Really we should be able to get it, because we just read a dir's
         * attr to get info on the target, but I'm not sure how to make that all
         * fit together.
         */
        PINT_SERVREQ_SETATTR_FILL(msg_p->req,
                                  PVFS_REQ_DIRDATA,  /* sub ctrl */
                                  sm_p->u.mkdir.capability,
                                  *sm_p->cred_p,
                                  sm_p->parent_ref.fs_id,
                                  sm_p->u.mkdir.dirdata_handles[i],
                                  sm_p->u.mkdir.dir_attr.meta_sid_count,
                                  &sm_p->u.mkdir.dirdata_sid_array[i *
                                              sm_p->u.mkdir.dir_attr.meta_sid_count],
                                  dirdata_attr,      /* attrs COPIED by macro */
                                  NULL);
        /* this is done in the FILL macro */
        /* PINT_copy_object_attr(&msg_p->req.u.setattr.attr, &dirdata_attr); */

        msg_p->msgclass = PVFS_IO_METADATA;
        msg_p->msgdir = PVFS_IO_WRITE;
        msg_p->fs_id = sm_p->parent_ref.fs_id;
        msg_p->handle = sm_p->u.mkdir.dirdata_handles[i];
        msg_p->sid_count = sm_p->u.mkdir.dir_attr.meta_sid_count;
        msg_p->sid_index = 0;  /* I'm wondering if this should be i rather than 0? */
                               /* I think this is an index within the array of this
                                * request (item below) not the whole array - verify
                                */
        msg_p->sid_array = &sm_p->u.mkdir.dirdata_sid_array[i * 
                                          sm_p->u.mkdir.dir_attr.meta_sid_count];
        msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
        msg_p->comp_fn = NULL;

        PVFS_debug_servreq_setattr(GOSSIP_SETATTR_DEBUG, &(msg_p->req.u.setattr));

        ret = PVFS_SID_get_addr(&msg_p->svr_addr, msg_p->sid_array);
        /* ret = PVFS_SID_get_addr(&msg_p->svr_addr, &sm_p->object_ref.sid_array[0]); */
        if (ret)
        {
            gossip_err("Failed to map meta server address\n");
            js_p->error_code = ret;
        }
        else
        {
            js_p->error_code = 0;
        }
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    free(dirdata_attr.u.dirdata.dist_dir_bitmap);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_setattr_failure(struct PINT_smcb *smcb,
                                             job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i = 0;
    PINT_sm_msgpair_state *msg_p = NULL;

    sm_p->u.mkdir.stored_error_code = js_p->error_code;

    foreach_msgpair(&sm_p->msgarray_op, msg_p, i)
    {
        PINT_free_object_attr(&msg_p->req.u.setattr.attr);
    }

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: mkdir_setattr_failure\n");

    PVFS_perror_gossip("mkdir setattr failed", js_p->error_code);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_crdirent_setup_msgpair(struct PINT_smcb *smcb,
                                                   job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_dist_dir_hash_type dirdata_hash;
    int dirdata_server_index;
    int dirdata_sid_index;
    int i = 0;

    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "mkdir state: crdirent_setup_msgpair\n");

    js_p->error_code = 0;

    /* find the hash value and the dist dir bucket */
    dirdata_hash = PINT_encrypt_dirdata(sm_p->u.mkdir.object_name);
    gossip_debug(GOSSIP_MKDIR_DEBUG,
            "mkdir: encrypt dirent %s into hash value %llu.\n",
            sm_p->u.mkdir.object_name,
            llu(dirdata_hash));

    dirdata_server_index =
        PINT_find_dist_dir_bucket(dirdata_hash,
            &sm_p->getattr.attr.u.dir.dist_dir_attr,
            sm_p->getattr.attr.u.dir.dist_dir_bitmap);

    dirdata_sid_index = dirdata_server_index *
                        sm_p->getattr.attr.u.dir.dist_dir_attr.sid_count;

    gossip_debug(GOSSIP_MKDIR_DEBUG,
                 "mkdir: selecting bucket No.%d from dist_dir_bitmap.\n",
                 dirdata_server_index);

    gossip_debug(GOSSIP_MKDIR_DEBUG," mkdir: posting crdirent req\n");

    gossip_debug(GOSSIP_MKDIR_DEBUG, "hooking dirent %s (%s) under "
                 "parent handle %s, dirdata_handle %s with server_no=%d\n",
                 sm_p->u.mkdir.object_name,
                 PVFS_OID_str(sm_p->u.mkdir.metadata_handle),
                 PVFS_OID_str(&sm_p->parent_ref.handle),
                 PVFS_OID_str(&sm_p->getattr.attr.u.dir.dirdata_handles[
                                                  dirdata_server_index]),
                 dirdata_server_index);

    /* Clean up previous use of msgpair */
    foreach_msgpair(&sm_p->msgarray_op, msg_p, i)
    {
        PINT_free_object_attr(&msg_p->req.u.setattr.attr);
    }

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    /* updating the parent - pass in object name, OID, SIDs, and 
     * parent's OID and SIDs - use one count and fs_id
     */
    PINT_SERVREQ_CRDIRENT_FILL(
               msg_p->req,
               sm_p->getattr.attr.capability,
               *sm_p->cred_p,
               sm_p->u.mkdir.object_name,
               sm_p->object_ref,   /* this is dirent being created */
               sm_p->parent_ref,   /* this is a dirdata, may or may not exist */
               sm_p->getattr.attr, /* attrs from dir to build dirdata */
               dirdata_server_index,
               dirdata_sid_index,
               sm_p->hints);

    gossip_debug(GOSSIP_ENDECODE_DEBUG,"%s: attr sid_count: %d\n", __func__,
                 sm_p->getattr.attr.u.dir.dist_dir_attr.sid_count);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    /* this is the actual target - the DD not the DIR */
    msg_p->handle = sm_p->getattr.attr.u.dir.dirdata_handles[
                                                     dirdata_server_index];
    /* dir objects are all metadata so sid counts are the same */
    msg_p->sid_count = sm_p->parent_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = &sm_p->getattr.attr.u.dir.dirdata_sids[
                                                     dirdata_sid_index];
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = mkdir_crdirent_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[msg_p->sid_index]);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_crdirent_failure(struct PINT_smcb *smcb,
                                             job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_uid local_uid;

    /* if need to retry. clear the error_code and setup getattr. */
    if(js_p->error_code == -PVFS_EAGAIN &&
       sm_p->u.mkdir.retry_count < sm_p->msgarray_op.params.retry_limit)
    {
        sm_p->u.mkdir.retry_count++;

        gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir: received -PVFS_EAGAIN, "
                                 "will retry getattr and crdirent (attempt number %d).\n",
                                 sm_p->u.mkdir.retry_count);

        /* clear acache content */
        PINT_acache_invalidate(sm_p->object_ref);
        /* clear capcache content */
        local_uid = PINT_HINT_GET_LOCAL_UID(sm_p->hints);

        if (local_uid == (PVFS_uid) -1)
        {
            local_uid = PINT_util_getuid();

            PVFS_hint_add(&sm_p->hints, PVFS_HINT_LOCAL_UID_NAME,
                          sizeof(PVFS_uid), &local_uid);
        }

        PINT_client_capcache_invalidate(sm_p->object_ref, local_uid);

        /* TODO: free cap? */

        /* set up new getattr */
        PINT_SM_GETATTR_STATE_FILL(
                sm_p->getattr,
                sm_p->object_ref,
                PVFS_ATTR_COMMON_ALL | PVFS_ATTR_DIR_HINT |
                        PVFS_ATTR_CAPABILITY | PVFS_ATTR_DISTDIR_ATTR,
                PVFS_TYPE_DIRECTORY,
                0);

        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    sm_p->u.mkdir.stored_error_code = js_p->error_code;

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: crdirent_failure\n");

    PVFS_perror_gossip("mkdir crdirent failed", js_p->error_code);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_delete_handle_setup_msgpair(struct PINT_smcb *smcb,
                                                        job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: "
                 "delete_handle_setup_msgpair_array\n");

    js_p->error_code = 0;

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    PINT_SERVREQ_REMOVE_FILL(msg_p->req,
                             sm_p->getattr.attr.capability,
                             *sm_p->cred_p,
                             sm_p->parent_ref.fs_id,
                             sm_p->object_ref.handle,
                             sm_p->object_ref.sid_count,
                             sm_p->object_ref.sid_array,
                             sm_p->hints);

    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->sid_count = sm_p->object_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->object_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = mkdir_delete_handle_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &sm_p->object_ref.sid_array[0]);
    if (ret)
    {
        gossip_err("failed to translate server address");
        js_p->error_code = ret;
    }

    gossip_debug(GOSSIP_MKDIR_DEBUG, " Preparing to remove "
                 "directory handle %s\n", PVFS_OID_str(&msg_p->handle));

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_cleanup(struct PINT_smcb *smcb,
                                    job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: cleanup\n");

    PVFS_util_release_sys_attr(&sm_p->u.mkdir.sys_attr);

    sm_p->error_code = (sm_p->u.mkdir.stored_error_code ?
                        sm_p->u.mkdir.stored_error_code :
                        js_p->error_code);

    if (sm_p->error_code == 0)
    {
        sm_p->u.mkdir.mkdir_resp->ref = sm_p->object_ref;
/*
        sm_p->u.mkdir.mkdir_resp->ref.fs_id = sm_p->parent_ref.fs_id;
        sm_p->u.mkdir.mkdir_resp->ref.handle = sm_p->object_ref.handle;
        sm_p->u.mkdir.mkdir_resp->ref.sid_count = sm_p->object_ref.sid_count;
        sm_p->u.mkdir.mkdir_resp->ref.sid_array = sm_p->object_ref.sid_array;
*/

        /* insert newly created directory handle into the ncache */
        PINT_ncache_update((const char*)sm_p->u.mkdir.object_name, 
                           (const PVFS_object_ref *)&sm_p->object_ref, 
                           (const PVFS_object_ref *)&(sm_p->parent_ref));

    }
    else if ((PVFS_ERROR_CLASS(-sm_p->error_code) == PVFS_ERROR_BMI) &&
             (sm_p->u.mkdir.retry_count < sm_p->msgarray_op.params.retry_limit))
    {
        sm_p->u.mkdir.stored_error_code = 0;
        sm_p->u.mkdir.retry_count++;

        gossip_debug(GOSSIP_MKDIR_DEBUG, "Retrying mkdir operation "
                     "(attempt number %d)\n", sm_p->u.mkdir.retry_count);

        js_p->error_code = MKDIR_RETRY;
        return SM_ACTION_COMPLETE;
    }
    else
    {
        PINT_acache_invalidate(sm_p->parent_ref);
        PVFS_perror_gossip("mkdir failed with error", sm_p->error_code);
    }

    if (sm_p->u.mkdir.metadata_handle)
    {
        free(sm_p->u.mkdir.metadata_handle);
        sm_p->u.mkdir.metadata_handle = NULL;
    }
    if (sm_p->u.mkdir.metadata_sid_array)
    {
        free(sm_p->u.mkdir.metadata_sid_array);
        sm_p->u.mkdir.metadata_sid_array = NULL;
    }
    if (sm_p->u.mkdir.dirdata_handles)
    {
        free(sm_p->u.mkdir.dirdata_handles);
        sm_p->u.mkdir.dirdata_handles = NULL;
    }
    if (sm_p->u.mkdir.dirdata_sid_array)
    {
        free(sm_p->u.mkdir.dirdata_sid_array);
        sm_p->u.mkdir.dirdata_sid_array = NULL;
    }

    PINT_cleanup_capability(&sm_p->u.mkdir.capability);

    PINT_msgpairarray_destroy(&sm_p->msgarray_op);

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

#if 0
static PINT_sm_action mkdir_getattr_setup(struct PINT_smcb *smcb,
                                          job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_SM_GETATTR_STATE_FILL(sm_p->u.mkdir.metadata_getattr,
                               sm_p->object_ref,
                               PVFS_ATTR_CAPABILITY, 
                               PVFS_TYPE_DIRECTORY,
                               0);
    
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_seteattr_setup_msgpair(struct PINT_smcb *smcb,
                                                   job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int eattr_count = 0;
    int cur_index = 0;
    PINT_sm_msgpair_state *msg_p = NULL;
    int ret = -PVFS_EINVAL;

    /* NOTE: any memory allocated here will be free'd in the cleanup function */

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: seteattr_setup_msgpair\n");
    
    /* don't set any hint attributes if the parent doesn't have them */
    if(!(sm_p->getattr.attr.mask & PVFS_ATTR_DIR_HINT))
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: skipping seteattr\n");
        js_p->error_code = MKDIR_SKIP_EATTR;
        return SM_ACTION_COMPLETE;
    }

    /* count how many hints we acquired */
    if(sm_p->getattr.attr.u.dir.hint.dfile_count > 0)
    {
        eattr_count++;
    }
    if(sm_p->getattr.attr.u.dir.hint.dist_name != NULL)
    {
        eattr_count++;
    }
    if(sm_p->getattr.attr.u.dir.hint.dist_params != NULL)
    {
        eattr_count++;
    }

    if(eattr_count == 0)
    {
        /* nothing to inherit */
        js_p->error_code = MKDIR_SKIP_EATTR;
        return SM_ACTION_COMPLETE;
    }

    sm_p->u.mkdir.key_array = (PVFS_ds_keyval*)calloc(eattr_count,
                                                      sizeof(PVFS_ds_keyval));
    if(!sm_p->u.mkdir.key_array)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    sm_p->u.mkdir.val_array = (PVFS_ds_keyval*)calloc(eattr_count,
                                                      sizeof(PVFS_ds_keyval));
    if(!sm_p->u.mkdir.val_array)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    if(sm_p->getattr.attr.u.dir.hint.dfile_count > 0)
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir: setting num_dfiles\n");
        sm_p->u.mkdir.key_array[cur_index].buffer = "user.pvfs2.num_dfiles";
        sm_p->u.mkdir.key_array[cur_index].buffer_sz = 
                        strlen("user.pvfs2.num_dfiles") + 1;

        sm_p->u.mkdir.val_array[cur_index].buffer = calloc(1, 16);
        if(!sm_p->u.mkdir.val_array[cur_index].buffer)
        {
            js_p->error_code = -PVFS_ENOMEM;
            return SM_ACTION_COMPLETE;
        }
#ifdef WIN32
        _snprintf((char*)sm_p->u.mkdir.val_array[cur_index].buffer,
                  16,
                  "%d",
                  sm_p->getattr.attr.u.dir.hint.dfile_count);
#else
        snprintf((char*)sm_p->u.mkdir.val_array[cur_index].buffer,
                 16,
                 "%d",
                 sm_p->getattr.attr.u.dir.hint.dfile_count);
#endif
        sm_p->u.mkdir.val_array[cur_index].buffer_sz = 
                strlen((char*)sm_p->u.mkdir.val_array[cur_index].buffer) + 1;

        cur_index++;
    }
    if(sm_p->getattr.attr.u.dir.hint.dist_name != NULL)
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir: setting dist_name\n");
        sm_p->u.mkdir.key_array[cur_index].buffer = "user.pvfs2.dist_name";
        sm_p->u.mkdir.key_array[cur_index].buffer_sz = 
                        strlen("user.pvfs2.dist_name") + 1;
        sm_p->u.mkdir.val_array[cur_index].buffer =
                        sm_p->getattr.attr.u.dir.hint.dist_name;
        sm_p->u.mkdir.val_array[cur_index].buffer_sz =
                        sm_p->getattr.attr.u.dir.hint.dist_name_len;

        cur_index++;
    }
    if(sm_p->getattr.attr.u.dir.hint.dist_params != NULL)
    {
        gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir: setting dist_params\n");
        sm_p->u.mkdir.key_array[cur_index].buffer = "user.pvfs2.dist_params";
        sm_p->u.mkdir.key_array[cur_index].buffer_sz = 
                        strlen("user.pvfs2.dist_params") + 1;

        sm_p->u.mkdir.val_array[cur_index].buffer = 
                        sm_p->getattr.attr.u.dir.hint.dist_params;
        sm_p->u.mkdir.val_array[cur_index].buffer_sz = 
                        sm_p->getattr.attr.u.dir.hint.dist_params_len;

        cur_index++;
    }

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    PINT_SERVREQ_SETEATTR_FILL(msg_p->req,
                               PVFS_REQ_DIRDATA,
                               sm_p->u.mkdir.metadata_getattr.attr.capability,
                               sm_p->parent_ref.fs_id,
                               sm_p->object_ref.handle,
                               sm_p->object_ref.sid_count,
                               sm_p->object_ref.sid_array,
                               0,
                               eattr_count,
                               sm_p->u.mkdir.key_array,
                               sm_p->u.mkdir.val_array,
                               sm_p->hints);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->sid_count = sm_p->object_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->object_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    /* NOTE: no comp_fn needed. */

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &sm_p->object_ref.sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }
    else
    {
        js_p->error_code = 0;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_seteattr_failure(struct PINT_smcb *smcb,
                                             job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    sm_p->u.mkdir.stored_error_code = js_p->error_code;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "mkdir state: mkdir_seteattr_failure\n");

    PVFS_perror_gossip("mkdir seteattr failed", js_p->error_code);
    return SM_ACTION_COMPLETE;
}
#endif

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
