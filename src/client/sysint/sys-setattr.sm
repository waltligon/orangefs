/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup sysint
 *
 *  PVFS2 system interface routines for setting the attributes of an object
 *  (file or directory).
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "pint-util.h"
#include "pvfs2-internal.h"
#include "sid.h"
#include "pvfs2-types-debug.h"

static int setattr_msg_comp_fn(void *v_p,
                               struct PVFS_server_resp *resp_p,
                               int index);

%%

machine pvfs2_client_setattr_sm
{
    state init
    {
        run setattr_init;
        default => setattr_getattr;
    }

    state setattr_getattr
    {
        jump pvfs2_client_getattr_sm;
        success => setattr_msg_setup_msgpair;
        default => cleanup;
    }

    state setattr_msg_setup_msgpair
    {
        run setattr_msg_setup_msgpair;
        success => setattr_msg_xfer_msgpair;
        default => cleanup;
    }

    state setattr_msg_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => setattr_msg_failure;
    }

    state setattr_msg_failure
    {
        run setattr_msg_failure;
        default => cleanup;
    }

    state cleanup
    {
        run setattr_cleanup;
        default => terminate;
    }
}

%%

/** Initiate modification of attributes of a single object.
 */
PVFS_error PVFS_isys_setattr(PVFS_object_ref ref,
                             PVFS_sys_attr attr,
                             const PVFS_credential *credential,
                             PVFS_sys_op_id *op_id,
                             PVFS_hint hints,
                             void *user_ptr)
{
    PVFS_error ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_setattr entered\n");

    if ((!PVFS_OID_cmp(&ref.handle, &PVFS_HANDLE_NULL)) ||
        (ref.fs_id == PVFS_FS_ID_NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
        return ret;
    }

    /*
     * make sure the caller didn't set invalid mask bits.
     * only common attributes can be set.
     */
    if ((attr.mask & ~PVFS_ATTR_SYS_ALL_TIMES) != 0)
    {
        gossip_lerr("PVFS_isys_setattr() failure: invalid attributes "
                    "specified\n");
        return ret;
    }

    /* make sure that the permission bits are acceptable */
    if ((attr.mask & PVFS_ATTR_SYS_PERM) &&
        (attr.perms & ~PVFS_PERM_VALID) != 0)
    {
        gossip_lerr("PVFS_isys_setattr() failure: invalid or unsupported " 
                    "permission bits\n");
        return(-PVFS_EINVAL);
    }

    PINT_smcb_alloc(&smcb,
                    PVFS_SYS_SETATTR,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);

    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }

    PINT_state_machine_locate(smcb, 1);

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, ref.fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);

    sm_p->object_ref = ref;

    PVFS_hint_copy(hints, &sm_p->hints);
    PVFS_hint_add(&sm_p->hints,
                  PVFS_HINT_HANDLE_NAME,
                  sizeof(PVFS_handle),
                  &ref.handle);

    ret = PVFS_util_copy_sys_attr(&sm_p->u.setattr.sys_attr, &attr);
    if(ret < 0)
    {
        gossip_lerr("PVFS_isys_setattr() failure: %s\n",
                    strerror(PVFS_get_errno_mapping(-ret)));
        return ret;
    }

    /* we jump locally to the getattr SM which will check for cached attributes
     * and capabilities, barring that will initiate a remote getattr for the
     * capability needed to do the setattr
     */
    PINT_SM_GETATTR_STATE_FILL(sm_p->getattr,
                               sm_p->object_ref,
                               PVFS_ATTR_CAPABILITY,
                               PVFS_TYPE_NONE,
                               0);

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "Doing setattr on handle %s on fs %d\n",
                 PVFS_OID_str(&ref.handle),
                 ref.fs_id);

    return PINT_client_state_machine_post(smcb, op_id, user_ptr);
}

/**  Modify the attributes of a single object.
 */
PVFS_error PVFS_sys_setattr(PVFS_object_ref ref,
                            PVFS_sys_attr attr,
                            const PVFS_credential *credential,
                            PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_setattr entered\n");

    ret = PVFS_isys_setattr(ref, attr, credential, &op_id, hints, NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_setattr call", ret);
        error = ret;
    }
    else if (!ret && op_id != -1)
    {
        ret = PVFS_sys_wait(op_id, "setattr", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
        PINT_sys_release(op_id);
    }
    return error;
}

/* <=================== COMPLETION FUNCTIONS ==================> */

static int setattr_msg_comp_fn(void *v_p,
                               struct PVFS_server_resp *resp_p,
                               int index)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "setattr_msg_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_SETATTR);
    return resp_p->status;
}

/* <================== STATE ACTION FUNCTIONS =================> */

static PINT_sm_action setattr_init(struct PINT_smcb *smcb,
                                   job_status_s *js_p)
{
    assert(js_p->error_code == 0);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action setattr_msg_setup_msgpair(struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;
#if 0
    PVFS_ds_type objtype;
#endif

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," setattr: posting setattr req\n");

    assert(sm_p->getattr.attr.mask & PVFS_ATTR_CAPABILITY);

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

#if 0
    objtype = ((sm_p->u.setattr.sys_attr.mask & PVFS_ATTR_SYS_TYPE) ? 
               sm_p->u.setattr.sys_attr.objtype : PVFS_TYPE_NONE);
#endif

    /* clients should not be able to mess with dfile and distribution
     * information here.  Those parameters should only be set at create time.
     * Maybe at some point we'll have a utility to adjust those attributes.  At
     * this time if they somehow get changed we'll have garbage on disk
     */
    PINT_SERVREQ_SETATTR_FILL(msg_p->req,
                              PVFS_REQ_DATAFILE,
                              sm_p->getattr.attr.capability,
                              *sm_p->cred_p,
                              sm_p->object_ref.fs_id,  /* collapse into object_ref */
                              sm_p->object_ref.handle,
                              sm_p->object_ref.sid_count,
                              sm_p->object_ref.sid_array,
                              sm_p->u.setattr.obj_attr,
                              sm_p->hints);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->object_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->sid_count = sm_p->object_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->object_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = setattr_msg_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "setattr attr mask sent to server: 0x%x\n",
                 (int)sm_p->u.setattr.sys_attr.mask);

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action setattr_msg_failure(struct PINT_smcb *smcb,
                                          job_status_s *js_p)
{
    assert(js_p->error_code != 0);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action setattr_cleanup(struct PINT_smcb *smcb,
                                      job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    sm_p->error_code = js_p->error_code;

    /* Since we just updated attributes (most of the time we are updating timestamps) 
     * for this object, we must invalidate it's acache entry.  We do not do partial 
     * updates anymore.
     * Can we not update the whole attr rec?
     */
    if(sm_p->error_code == 0)
    {
       PINT_acache_invalidate(sm_p->object_ref);
    }

    PINT_SM_GETATTR_STATE_CLEAR(sm_p->getattr);

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
