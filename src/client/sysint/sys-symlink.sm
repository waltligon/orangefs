/* 
 * (C) 2003 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

/** \file
 *  \ingroup sysint
 *
 *  PVFS2 system interface routines for creating symlinks.
 */

#include <string.h>
#include <assert.h>

#include "client-state-machine.h"
#include "pvfs2-debug.h"
#include "job.h"
#include "gossip.h"
#include "str-utils.h"
#include "pint-cached-config.h"
#include "PINT-reqproto-encode.h"
#include "pint-util.h"
#include "ncache.h"
#include "pvfs2-internal.h"
#include "sid.h"
#include "dist-dir-utils.h"

enum
{
    SYMLINK_RETRY = 170
};

static int symlink_create_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);
static int symlink_setattr_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);
static int symlink_crdirent_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);
static int symlink_delete_handle_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int index);

%%

machine pvfs2_client_symlink_sm
{
    state init
    {
        run symlink_init;
        default => symlink_parent_getattr;
    }

    state symlink_parent_getattr
    {
        jump pvfs2_client_getattr_sm;
        success => dspace_create_setup_msgpair;
        default => cleanup;
    }

    state dspace_create_setup_msgpair
    {
        run symlink_dspace_create_setup_msgpair;
        success => dspace_create_xfer_msgpair;
        default => dspace_create_failure;
    }

    state dspace_create_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => new_metafile_init;
        default => dspace_create_failure;
    }

    state dspace_create_failure
    {
        run symlink_dspace_create_failure;
        default => cleanup;
    }
    
    state new_metafile_init
    {
        run getattr_new_metafile_init;
        success => getattr_new_metafile;
        default => symlink_setattr_failure;
    }
    
    state getattr_new_metafile
    {
        jump pvfs2_client_getattr_sm;
        success => symlink_setattr_setup_msgpair;
        default => symlink_setattr_failure;
    }

    state symlink_setattr_setup_msgpair
    {
        run symlink_setattr_setup_msgpair;
        success => symlink_setattr_xfer_msgpair;
        default => cleanup;
    }

    state symlink_setattr_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => crdirent_init;
        default => symlink_setattr_failure;
    }

    state symlink_setattr_failure
    {
        run symlink_setattr_failure;
        default => delete_handle_setup_msgpair;
    }
    
    state crdirent_init
    {
        run getattr_crdirent_init;
        success => getattr_crdirent;
        default => crdirent_failure;
    }
    
    state getattr_crdirent
    {
        jump pvfs2_client_getattr_sm;
        success => crdirent_setup_msgpair;
        default => crdirent_failure;
    }


    state crdirent_setup_msgpair
    {
        run symlink_crdirent_setup_msgpair;
        success => crdirent_xfer_msgpair;
        default => crdirent_failure;
    }

    state crdirent_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => cleanup;
        default => crdirent_failure;
    }

    state crdirent_failure
    {
        run symlink_crdirent_failure;
        default => delete_handle_setup_msgpair;
    }

    state delete_handle_setup_msgpair
    {
        run symlink_delete_handle_setup_msgpair;
        success => delete_handle_xfer_msgpair;
        default => cleanup;
    }

    state delete_handle_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        default => cleanup;
    }

    state cleanup
    {
        run symlink_cleanup;
        SYMLINK_RETRY => init;
        default => terminate;
    }
}

%%

/** Initiate creation of a new symlink object on some server.
 */
PVFS_error PVFS_isys_symlink(char *entry_name,
                             PVFS_object_ref parent_ref,
                             char *target,
                             PVFS_sys_attr attr,
                             const PVFS_credential *credential,
                             PVFS_sysresp_symlink *resp,
                             PVFS_sys_op_id *op_id,
                             PVFS_hint hints,
                             void *user_ptr)
{
    PVFS_error ret = -PVFS_EINVAL;
    PINT_smcb *smcb = NULL;
    PINT_client_sm *sm_p = NULL;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_isys_symlink entered\n");

    if (!PVFS_OID_cmp(&parent_ref.handle, &PVFS_HANDLE_NULL) ||
        (parent_ref.fs_id == PVFS_FS_ID_NULL) ||
        (entry_name == NULL) || (resp == NULL) || (target == NULL))
    {
        gossip_err("invalid (NULL) required argument\n");
        return ret;
    }

    if ((attr.mask & PVFS_ATTR_SYS_ALL_SETABLE) !=
        PVFS_ATTR_SYS_ALL_SETABLE)
    {
        gossip_lerr("PVFS_isys_symlink() failure: invalid attributes "
                    "specified\n");
        return ret;
    }

    if (((strlen(entry_name) + 1) > PVFS_REQ_LIMIT_SEGMENT_BYTES) ||
        ((strlen(target) + 1) > PVFS_REQ_LIMIT_SEGMENT_BYTES))
    {
        return -PVFS_ENAMETOOLONG;
    }

    PINT_smcb_alloc(&smcb,
                    PVFS_SYS_SYMLINK,
                    sizeof(struct PINT_client_sm),
                    client_op_state_get_machine,
                    client_state_machine_terminate,
                    pint_client_sm_context);

    if (smcb == NULL)
    {
        return -PVFS_ENOMEM;
    }

    PINT_state_machine_locate(smcb, 1);

    sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_init_msgarray_params(sm_p, parent_ref.fs_id);
    PINT_init_sysint_credential(sm_p->cred_p, credential);

    sm_p->u.sym.link_name = entry_name;
    sm_p->u.sym.link_target = target;
    sm_p->u.sym.sym_resp = resp;
    PVFS_util_copy_sys_attr(&sm_p->u.sym.sys_attr, &attr);
    sm_p->u.sym.stored_error_code = 0;
    sm_p->u.sym.retry_count = 0;

    sm_p->parent_ref = parent_ref;

    sm_p->parent_ref = parent_ref;
    PVFS_hint_copy(hints, &sm_p->hints);

    gossip_debug(
        GOSSIP_CLIENT_DEBUG, "Symlinking %s under parent handle %s "
        "on fs %d to %s\n", entry_name, PVFS_OID_str(&parent_ref.handle),
        parent_ref.fs_id, target);

    return PINT_client_state_machine_post(smcb, op_id, user_ptr);
}

/** Create a new symlink object on some server.
 */
PVFS_error PVFS_sys_symlink(char *entry_name,
                            PVFS_object_ref parent_ref,
                            char *target,
                            PVFS_sys_attr attr,
                            const PVFS_credential *credential,
                            PVFS_sysresp_symlink *resp,
                            PVFS_hint hints)
{
    PVFS_error ret = -PVFS_EINVAL, error = 0;
    PVFS_sys_op_id op_id;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "PVFS_sys_symlink entered\n");

    ret = PVFS_isys_symlink(entry_name,
                            parent_ref,
                            target,
                            attr,
                            credential,
                            resp,
                            &op_id,
                            hints,
                            NULL);
    if (ret)
    {
        PVFS_perror_gossip("PVFS_isys_symlink call", ret);
        error = ret;
    }
    else if (!ret && op_id != -1)
    {
        ret = PVFS_sys_wait(op_id, "symlink", &error);
        if (ret)
        {
            PVFS_perror_gossip("PVFS_sys_wait call", ret);
            error = ret;
        }
        PINT_sys_release(op_id);
    }
    return error;
}

/****************************************************************/
/* COMPLETION FUNCTIONS */
/****************************************************************/

static int symlink_create_comp_fn(void *v_p,
                                  struct PVFS_server_resp *resp_p,
                                  int index)
{
    /* PINT_smcb *smcb = v_p; */
    /* PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_MSGPAIR_PARENT_SM); */

    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink_create_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_BATCH_CREATE);

    if (resp_p->status != 0)
    {
        return resp_p->status;
    }

    return 0;
}

static int symlink_setattr_comp_fn(void *v_p,
                                   struct PVFS_server_resp *resp_p,
                                   int index)
{
    PINT_smcb *smcb = v_p;
    PINT_smcb *parent_smcb = smcb->parent_smcb;
    PINT_client_sm *sm_p = PINT_sm_frame(parent_smcb, PINT_MSGPAIR_PARENT_SM);
    PVFS_object_attr attr;

    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink_setattr_comp_fn\n");

    if(resp_p->status == 0)
    {
        PINT_CONVERT_ATTR(&attr, &sm_p->u.sym.sys_attr, 0);
        /* V3 check if this is correct - changed in V2.9 */
        PINT_acache_update(sm_p->object_ref, &attr, NULL);
    }

    assert(resp_p->op == PVFS_SERV_SETATTR);
    return resp_p->status;
}

static int symlink_crdirent_comp_fn(void *v_p,
                                    struct PVFS_server_resp *resp_p,
                                    int index)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink_crdirent_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_CRDIRENT);
    return resp_p->status;
}

static int symlink_delete_handle_comp_fn(void *v_p,
                                         struct PVFS_server_resp *resp_p,
                                         int index)
{
    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink_delete_handle_comp_fn\n");

    assert(resp_p->op == PVFS_SERV_REMOVE);
    return resp_p->status;
}

/****************************************************************/
/* STATE ACTION FUNCTIONS */
/****************************************************************/

static PINT_sm_action symlink_init(struct PINT_smcb *smcb,
                                   job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = 1;
    job_id_t tmp_id;

    assert((js_p->error_code == 0) ||
           (js_p->error_code == SYMLINK_RETRY));

    if (js_p->error_code == SYMLINK_RETRY)
    {
        js_p->error_code = 0;

        ret = job_req_sched_post_timer(sm_p->msgarray_op.params.retry_delay,
                                       smcb,
                                       0,
                                       js_p,
                                       &tmp_id,
                                       pint_client_sm_context);
    }

    PINT_SM_GETATTR_STATE_FILL(sm_p->getattr,
                               sm_p->parent_ref,
                               PVFS_ATTR_COMMON_ALL | PVFS_ATTR_CAPABILITY,
                                                      PVFS_TYPE_DIRECTORY,
                               0);

    return ret;
}

static PINT_sm_action symlink_dspace_create_setup_msgpair(
                                                struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i = 0;
    PINT_sm_msgpair_state *msg_p = NULL;

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," create: posting create req\n");

    /* V3 add the OID and SIDs for this create 
     * this also sets the correct number of replicants
     */
    /* creating one object */
    PVFS_OBJ_gen_meta(&sm_p->object_ref, 1, sm_p->parent_ref.fs_id);

    /* initialize the msgarray struct */
    PINT_msgpairarray_init(&sm_p->msgarray_op, sm_p->object_ref.sid_count);

    PINT_debug_capability(&sm_p->getattr.attr.capability,"symlink dspace create");

    /* use msgpair array to send create to each SID */
    foreach_msgpair(&sm_p->msgarray_op, msg_p, i)
    {
        /* we need to pass the handle of the object!!! */
        PINT_SERVREQ_BATCH_CREATE_FILL(msg_p->req,
                                       sm_p->getattr.attr.capability,
                                       PVFS_TYPE_SYMLINK,
                                       sm_p->parent_ref.fs_id,
                                       sm_p->parent_ref.handle, /* bak ptr */
                                       sm_p->parent_ref.sid_array[0],
                                       1,
                                       &sm_p->object_ref.handle, /* array */
                                       sm_p->hints);

        msg_p->msgclass = PVFS_IO_METADATA;
        msg_p->msgdir = PVFS_IO_WRITE;
        msg_p->fs_id = sm_p->object_ref.fs_id;
        msg_p->handle = sm_p->object_ref.handle;
        /* each message has only one sid to send to */
        msg_p->sid_count = 1;
        msg_p->sid_index = 0;
        msg_p->sid_array = &sm_p->object_ref.sid_array[i];
        msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
        msg_p->comp_fn = symlink_create_comp_fn;

        PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);
        /* V3 how to process error in this loop?  Just bail? */
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_dspace_create_failure(struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    sm_p->u.sym.stored_error_code = js_p->error_code;

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action getattr_crdirent_init(struct PINT_smcb *smcb,
                                            job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink state: grabbing cap crdirent\n");

    PINT_SM_GETATTR_STATE_FILL(sm_p->getattr,
                               sm_p->parent_ref,
                               PVFS_ATTR_COMMON_ALL | PVFS_ATTR_DIR_HINT |
                                                      PVFS_ATTR_CAPABILITY, 
                               PVFS_TYPE_DIRECTORY,
                               0);

   return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_crdirent_setup_msgpair(struct PINT_smcb *smcb,
                                                     job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_dist_dir_hash_type dirdata_hash;
    int dirdata_server_index;
    int dirdata_sid_index;

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," symlink: posting crdirent req\n");

    /* find the hash value and the dist dir bucket */
    dirdata_hash = PINT_encrypt_dirdata(sm_p->u.sym.link_name);
    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "symlink: encrypt dirent %s into hash value %llu.\n",
                 sm_p->u.sym.link_name,
                 llu(dirdata_hash));

    dirdata_server_index =
            PINT_find_dist_dir_bucket(dirdata_hash,
                    &sm_p->getattr.attr.u.dir.dist_dir_attr,
                    sm_p->getattr.attr.u.dir.dist_dir_bitmap);
    dirdata_sid_index = dirdata_server_index * sm_p->parent_ref.sid_count;

    gossip_debug(GOSSIP_CLIENT_DEBUG,
                 "symlink: selecting bucket No.%d from dist_dir_bitmap.\n",
                 dirdata_server_index);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink: dirdata_handle: %s\n",
                 PVFS_OID_str(&sm_p->getattr.attr.u.dir.dirdata_handles[
                                                       dirdata_server_index]));

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    /* Add array of object SIDs plus parent SIDs so they can update */
    PINT_SERVREQ_CRDIRENT_FILL(msg_p->req,
                               sm_p->getattr.attr.capability,
                               *sm_p->cred_p,
                               sm_p->u.sym.link_name,
                               sm_p->object_ref,    /* new handle */
                               sm_p->parent_ref,
                               sm_p->getattr.attr, /* parent attrs read initially */
                               dirdata_server_index,
                               dirdata_sid_index,
                               sm_p->hints);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->parent_ref.fs_id;
    msg_p->handle = sm_p->getattr.attr.u.dir.dirdata_handles[
                                                       dirdata_server_index]; 
    msg_p->sid_count = sm_p->parent_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = &sm_p->getattr.attr.u.dir.dirdata_sids[
                                                      dirdata_sid_index]; 
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = symlink_crdirent_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &sm_p->parent_ref.sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_crdirent_failure(struct PINT_smcb *smcb,
                                               job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    sm_p->u.sym.stored_error_code = js_p->error_code;

    PVFS_perror_gossip("crdirent failure", js_p->error_code);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action getattr_new_metafile_init(struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_CLIENT_DEBUG, "symlink state: grabbing cap for meta\n");

    PINT_SM_GETATTR_STATE_FILL(sm_p->getattr,
                               sm_p->object_ref,
                               PVFS_ATTR_COMMON_ALL | PVFS_ATTR_DIR_HINT |
                                                      PVFS_ATTR_CAPABILITY, 
                               PVFS_TYPE_SYMLINK,
                               0);

   return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_setattr_setup_msgpair(struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;

    js_p->error_code = 0;

    gossip_debug(GOSSIP_CLIENT_DEBUG," symlink: posting setattr req\n");

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    /* force permissions to 777 for symbolic links */
    sm_p->u.sym.sys_attr.perms = 0777;

    PINT_CONVERT_ATTR(&sm_p->u.sym.obj_attr, &sm_p->u.sym.sys_attr, 0);

    PINT_SERVREQ_SETATTR_FILL(msg_p->req,
                              PVFS_REQ_OTHER,
                              sm_p->getattr.attr.capability,
                              *sm_p->cred_p,
                              sm_p->object_ref.fs_id,
                              sm_p->object_ref.handle,
                              sm_p->object_ref.sid_count,
                              sm_p->object_ref.sid_array,
                              sm_p->u.sym.obj_attr,
                              sm_p->hints);

    /* fill in symlink specific attributes */
    msg_p->req.u.setattr.attr.u.sym.target_path =
                              sm_p->u.sym.link_target;

    /* NOTE: path len always includes null terminator */
    msg_p->req.u.setattr.attr.u.sym.target_path_len =
                              strlen(sm_p->u.sym.link_target) + 1;

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->object_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->sid_count = sm_p->object_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->object_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = symlink_setattr_comp_fn;

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &sm_p->object_ref.sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_setattr_failure(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    sm_p->u.sym.stored_error_code = js_p->error_code;

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_delete_handle_setup_msgpair(
                                                struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PINT_sm_msgpair_state *msg_p = NULL;

    js_p->error_code = 0;

    PINT_msgpair_init(&sm_p->msgarray_op);
    msg_p = &sm_p->msgarray_op.msgpair;

    PINT_SERVREQ_REMOVE_FILL(msg_p->req,
                             sm_p->getattr.attr.capability,
                            *sm_p->cred_p,
                             sm_p->object_ref.fs_id,
                             sm_p->object_ref.handle,
                             sm_p->object_ref.sid_count,
                             sm_p->object_ref.sid_array,
                             sm_p->hints);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_WRITE;
    msg_p->fs_id = sm_p->object_ref.fs_id;
    msg_p->handle = sm_p->object_ref.handle;
    msg_p->sid_count = sm_p->object_ref.sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = sm_p->object_ref.sid_array;
    msg_p->retry_flag = PVFS_MSGPAIR_NO_RETRY;
    msg_p->comp_fn = symlink_delete_handle_comp_fn;

    ret= PVFS_SID_get_addr(&msg_p->svr_addr, &sm_p->object_ref.sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map meta server address\n");
        js_p->error_code = ret;
    }

    gossip_debug(GOSSIP_CLIENT_DEBUG, " Preparing to remove "
                 "metafile handle %s\n", PVFS_OID_str(&msg_p->handle));

    PINT_sm_push_frame(smcb, 0, &sm_p->msgarray_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action symlink_cleanup(struct PINT_smcb *smcb,
                                      job_status_s *js_p)
{
    struct PINT_client_sm *sm_p = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PVFS_util_release_sys_attr(&sm_p->u.sym.sys_attr);

    sm_p->error_code = (sm_p->u.sym.stored_error_code ?
                        sm_p->u.sym.stored_error_code :
                        js_p->error_code);

    if (sm_p->error_code == 0)
    {
        /* fill in outgoing response fields */
        sm_p->u.sym.sym_resp->ref = sm_p->object_ref;

        /* insert newly created symlink into the ncache */
        PINT_ncache_update((const char*) sm_p->u.sym.link_name,
                           (const PVFS_object_ref*) &(sm_p->object_ref),
                           (const PVFS_object_ref*) &(sm_p->parent_ref));

        /* Invalidate the symlink's parent from the acache, because
         * creating a symlink entry modifies the timestamps on the
         * directory.
         */
        PINT_acache_invalidate(sm_p->parent_ref);
    }
    else if ((PVFS_ERROR_CLASS(-sm_p->error_code) == PVFS_ERROR_BMI) &&
             (sm_p->u.sym.retry_count < sm_p->msgarray_op.params.retry_limit))
    {
        sm_p->u.sym.stored_error_code = 0;
        sm_p->u.sym.retry_count++;

        gossip_debug(GOSSIP_CLIENT_DEBUG, "Retrying symlink operation "
                     "(attempt number %d)\n", sm_p->u.sym.retry_count);

        js_p->error_code = SYMLINK_RETRY;
        return SM_ACTION_COMPLETE;
    }
    else
    {
        PINT_acache_invalidate(sm_p->object_ref);
    }

    PINT_msgpairarray_destroy(&sm_p->msgarray_op);
    PINT_SM_GETATTR_STATE_CLEAR(sm_p->getattr);

    PINT_SET_OP_COMPLETE;
    return SM_ACTION_TERMINATE;
}

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
