/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-internal.h"
#include "pint-security.h"

%%

machine pvfs2_batch_create_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => create;
        default => final_response;
    }

    state create
    {
        run batch_create_create;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run batch_create_cleanup;
        default => terminate;
    }
}

%%


/*
 * Function: batch_create_create
 *
 * Params:   server_op *s_op, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: Create a dataspace.
 */
static PINT_sm_action batch_create_create(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t i;

    if(s_op->req->u.batch_create.object_count < 1)
    {
        js_p->error_code = -PVFS_EINVAL;
        return(SM_ACTION_COMPLETE);
    }

    s_op->resp.u.batch_create.handle_count 
        = s_op->req->u.batch_create.object_count;

    /* allocate some space to hold the handles we create */
    s_op->resp.u.batch_create.handle_array = 
        malloc(s_op->req->u.batch_create.object_count * sizeof(PVFS_handle));
    if(!s_op->resp.u.batch_create.handle_array)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return(SM_ACTION_COMPLETE);
    }

    ret = job_trove_dspace_create_list(
        s_op->req->u.batch_create.fs_id,
        &s_op->req->u.batch_create.handle_extent_array,
        s_op->resp.u.batch_create.handle_array,
        s_op->req->u.batch_create.object_count,
        s_op->req->u.batch_create.object_type,
        NULL,
        TROVE_SYNC,
        smcb,
        0,
        js_p,
        &i,
        server_job_context,
        s_op->req->hints);

     return(ret);
}

/*
 * Function: batch_create_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s* js_p
 *
 * Pre:      None
 *
 * Post:     None
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static PINT_sm_action batch_create_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int i;

    if(s_op->resp.status == 0)
    {
        for(i=0; i<s_op->resp.u.batch_create.handle_count; i++)
        {
            gossip_debug(
                GOSSIP_SERVER_DEBUG, "Batch created: %llu\n",
                llu(s_op->resp.u.batch_create.handle_array[i]));
        }
    }

    if(s_op->resp.u.batch_create.handle_array)
    {
        free(s_op->resp.u.batch_create.handle_array);
    }

    return(server_state_machine_complete(smcb));
}

static PINT_sm_action perm_batch_create(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_BATCH_CREATE)
    {
        ret = 0;
    }
    else if ((s_op->req->capability.op_mask & PINT_CAP_CREATE) &&
             (s_op->req->u.batch_create.object_count == 1))
    {
        /* create capability allows you to create only one object */
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

struct PINT_server_req_params pvfs2_batch_create_params =
{
    .string_name = "batch_create",
    .perm = perm_batch_create,
    .access_type = PINT_server_req_modify,
    .state_machine = &pvfs2_batch_create_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
