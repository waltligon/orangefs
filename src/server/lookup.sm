/*
 * Copyright 2001-12 Clemson University
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <stddef.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#ifdef HAVE_MALLOC_H
/* #include <malloc.h> */
#endif

#include "pvfs2-config.h"
#include "server-config.h"
#include "pint-cached-config.h"
#include "pvfs2-types.h"
#include "pvfs2-server.h"
#include "state-machine.h"
#include "job.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-storage.h"
#include "pvfs2-internal.h"
#include "pint-util.h"
#include "str-utils.h"
#include "check.h"
#include "security-util.h"
#include "pint-uid-map.h"
#include "pint-cached-config.h"
#include "dist-dir-utils.h"
#include "sid.h"

static int lookup_get_dirent_comp_fn(
    void *v_p, struct PVFS_server_resp *resp_p, int i);

enum 
{
    LOOKUP_LOCAL_METAFILE_KEYVALS = 21,
    STATE_ENOTDIR                 = 22,
    STATE_NOMORESEGS              = 23,
    LOOKUP_CHECK_DIR_ACLS         = 24,
    LOOKUP_CHECK_PERMS            = 25,
    LOCAL_DIRENT                  = 26,
    REMOTE_DIRENT                 = 27
};

%%

machine pvfs2_lookup_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => init;
        default => final_response;
    }

    state init
    {
        run lookup_init;
        STATE_ENOTDIR => setup_resp;
        default => read_num_directory_entry_handles;
    }

    state read_object_metadata
    {
        run lookup_read_object_metadata;
        success => verify_object_metadata;
        default => setup_resp;
    }

    state verify_object_metadata
    {
        run lookup_verify_object_metadata;
        LOOKUP_CHECK_PERMS => check_perms;
        LOOKUP_LOCAL_METAFILE_KEYVALS => setup_to_read_local_metafile_keyvals;
        success => read_num_directory_entry_handles;
        default => setup_resp;
    }

    state setup_to_read_local_metafile_keyvals
    {
       run lookup_setup_getattr_request;
       success => initiate_getattr_request;
       default => setup_resp;
    }

    state initiate_getattr_request
    {
       jump pvfs2_get_attr_work_sm;
       default => verify_getattr_results;
    }

    state verify_getattr_results
    {
       run lookup_verify_getattr_results;
       default => setup_resp;
    }

    state check_perms
    {
        run lookup_check_perms;
        LOOKUP_CHECK_DIR_ACLS => read_directory_acls;
        success => read_num_directory_entry_handles;
        default => setup_resp;
    }

    state read_directory_acls
    {
        run lookup_read_directory_acls;
        default => check_acls;
    }

    state check_acls
    {
        run lookup_check_acls;
        success => read_num_directory_entry_handles;
        default => setup_resp;
    }

    state read_num_directory_entry_handles
    {
        run lookup_read_num_directory_entry_handles;
        default => read_directory_entry_handles;
    }
    
    state read_directory_entry_handles
    {
        run lookup_get_dirdata_from_keyval;
        success => read_directory_entry;
        default => setup_resp;
    }

    state read_directory_entry
    {
        run lookup_compute_directory_entry_location;
        LOCAL_DIRENT => read_directory_entry_local;
        REMOTE_DIRENT => read_directory_entry_remote;
        default => setup_resp;
    }

    state read_directory_entry_local
    {
        run lookup_read_directory_entry_local;
        success => read_object_metadata; 
        default => setup_resp;
    }

    state read_directory_entry_remote
    {
        run lookup_read_directory_entry_remote;
        success => read_directory_entry_xfer_msgpair;
        default => setup_resp;
    }

    state read_directory_entry_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => read_object_metadata;
        default => setup_resp;
    }

    state setup_resp
    {
        run lookup_setup_resp;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run lookup_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: lookup_init
 *
 * Synopsis: initializes internal structures and posts job to request
 * scheduler.
 *
 * Assumes req structure holds a valid path.
 *
 * Initializes segp, seg_ct, seg_nr fields in s_op->u.lookup.
 *
 * Allocates memory for handle and attribute arrays that will be
 * returned in the response.
 *
 * Note: memory is allocated as one big chunk, pointed to by
 * s_op->resp.u.lookup_path.handle_array.
 *
 */
static PINT_sm_action lookup_init(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    char *ptr = NULL;
    int ret;

    /* Assuming that the s_op->attr and s_op->ds_attr
     * are always a directory object,
     * defined by the handle in the lookup_path request.
     * Prelude uses that handle
     * to access the dspace attributes, storing them in
     * s_op->ds_attr and s_op->attr.
     */
    if ( s_op->ds_attr.type != PVFS_TYPE_DIRECTORY )
    {
       gossip_err("%s:Parent object is NOT a directory(%s)\n"
                 ,__func__
                 ,s_op->req->u.lookup_path.path);
       js_p->error_code = STATE_ENOTDIR;
       return SM_ACTION_COMPLETE;
    }

    /* set metasidcnt (# of sids per object) to the
     * sid_count found in the dspace entry
     * for this directory.  If the value is zero,
     * then use the filesystem sid_count defined
     * by the config file.
     * NOTE:  sid_count should ALWAYS be 1 or more.
     * 1 indicates no replication.
     * More than one indicates (sid_count - 1) number of replicas.
     * NOTE:  it is possible that the root has X # of replicas while
     * the system default has Y # of replicas.
     * So, if the s_op->target_handle is root, use the
     * system default metasidcount and NOT the root's sid count.  
     */

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "%s:s_op->target_handle=(%s)\n", __func__,
                 PVFS_OID_str(&s_op->target_handle));

    PVFS_object_ref fs_root;
    memset(&fs_root, 0, sizeof(fs_root));
    ret = PINT_cached_config_get_root_ref(s_op->target_fs_id, &fs_root);
    if (ret)
    {
       gossip_err("%s: Root handle for filesystem(%d) not found\n", __func__,
                  s_op->target_fs_id);
    }
    else
    {
       gossip_debug(GOSSIP_SERVER_DEBUG,
                    "%s: Root handle(%s)\n", __func__,
                    PVFS_OID_str(&fs_root.handle));
       if (!PVFS_OID_cmp(&s_op->target_handle, &fs_root.handle))
       {
          gossip_debug(GOSSIP_LOOKUP_DEBUG,
                       "%s: Target handle(%s) is root handle\n", __func__,
                       PVFS_OID_str(&s_op->target_handle));
       }
       else
       {
          gossip_debug(GOSSIP_LOOKUP_DEBUG,
                       "%s: Target handle(%s) is NOT a root handle\n", __func__,
                       PVFS_OID_str(&s_op->target_handle));
       }
    }

    /* s_op->metasidcnt = s_op->attr.u.dir.dist_dir_attr.sid_count; */
    s_op->metasidcnt = s_op->attr.meta_sid_count;

    /* is this relevant any more?  Do we put proper MSC in root attr? */
    if ( !(PVFS_OID_cmp(&s_op->target_handle,&fs_root.handle)) )
    {
       /* get the filesystem value representing the
        * number of sids per metadata object,
        * resetting s_op->metasidcnt 
        */
       ret = PINT_cached_config_get_metadata_sid_count(s_op->req->u.lookup_path.fs_id,
                                                       &(s_op->metasidcnt));
       if (ret)
       {
          gossip_err("%s:Error retrieving metadata sid count from config file.\n",__func__);
          js_p->error_code = ret;
          return SM_ACTION_COMPLETE;
       }
    }

    /* fill in the lookup portion of the PINT_server_op */
    s_op->u.lookup.segp = NULL;
    s_op->u.lookup.seg_nr = 0;
    s_op->u.lookup.array_index = 0;
    s_op->u.lookup.seg_ct = PINT_string_count_segments(s_op->req->u.lookup_path.path);
    s_op->u.lookup.handle_ct = 0;
    s_op->u.lookup.attr_ct = 0;

    gossip_debug(GOSSIP_LOOKUP_DEBUG,
                 " STARTING LOOKUP REQUEST "
                 "(path:%s)(fs_id:%d)(handle:%s)(attrmask:0x%0lx)"
                 "(# of segments:%u)\n",
                 s_op->req->u.lookup_path.path,
                 s_op->req->u.lookup_path.fs_id,
                 PVFS_OID_str(&s_op->req->u.lookup_path.handle),
                 s_op->req->u.lookup_path.attrmask,
                 s_op->u.lookup.seg_ct);
    if ((s_op->u.lookup.seg_ct < 0) ||
        (s_op->u.lookup.seg_ct > PVFS_REQ_LIMIT_PATH_SEGMENT_COUNT))
    {
        gossip_err("  invalid path %s (bad segment count); "
                   "sending error response\n",
                   s_op->req->u.lookup_path.path);
        js_p->error_code = -PVFS_ENOTDIR;
        return SM_ACTION_DEFERRED;
    }

    /* allocate the internal ds_attr_array */
    s_op->u.lookup.ds_attr_array = (PVFS_ds_attributes *)
                   malloc(s_op->u.lookup.seg_ct * sizeof(PVFS_ds_attributes));
    if (!s_op->u.lookup.ds_attr_array)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* allocate memory
     *
     * Note: all memory is allocated in a single block,
     * pointed to by s_op->resp.u.lookup_path.handle_array
     */
    /* for every handle, there will be a set of attributes and a list of
     * sids where those attributes are stored/replicated.
     */  
    ptr = malloc(s_op->u.lookup.seg_ct *
                 (sizeof(PVFS_handle) + sizeof(PVFS_object_attr) 
                                      + (sizeof(PVFS_SID)*s_op->metasidcnt)));
    if (!ptr)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->resp.u.lookup_path.handle_array = (PVFS_handle *)ptr;
    ptr += (s_op->u.lookup.seg_ct * sizeof(PVFS_handle));

    s_op->resp.u.lookup_path.attr_array = (PVFS_object_attr *)ptr;
    ptr += (s_op->u.lookup.seg_ct * sizeof(PVFS_object_attr));

    s_op->resp.u.lookup_path.sid_array = (PVFS_SID *)ptr;

    //s_op->resp.u.lookup_path.handle_count = s_op->resp.u.lookup_path.attr_count 
    //                                      = s_op->resp.u.lookup_path.sid_count
    //                                      = s_op->u.lookup.seg_ct;

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

/*
 * Function: lookup_read_object_metadata
 *
 * Synopsis: Given an object handle, looks up the attributes
 * (metadata) for that handle.
 *
 * Initializes key and value structures to direct metadata:
 * - if this is the starting (base) handle, store in
 *   s_op->u.lookup.base_attr
 * - otherwise store it in the appropriate slot in the resp handle array
 *
 * Posts the keyval read to trove.
 */
static PINT_sm_action lookup_read_object_metadata(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    PVFS_handle handle = PVFS_HANDLE_NULL;
    PVFS_ds_attributes *ds_attr = NULL;
    int i,j,start_index,end_index;

    assert(s_op->u.lookup.seg_nr <= s_op->u.lookup.seg_ct);

    /* A dirent object was found in the keyval db 
     */
    s_op->u.lookup.seg_nr++;
    s_op->u.lookup.array_index = s_op->u.lookup.seg_nr - 1;

    /* From the dirdata directory entry, we have a handle representing a
     * dspace object.  We don't know, yet, if this object is a metafile or
     * another directory until we retrieve it.  
     */ 
    handle  = (PVFS_handle)s_op->u.lookup.keyval_temp_store[0].oid;
    ds_attr = &(s_op->u.lookup.ds_attr_array[s_op->u.lookup.array_index]);

    /* store dirent object in the response structure */
    s_op->resp.u.lookup_path.handle_array[s_op->u.lookup.array_index] = handle; 

    start_index = ((s_op->u.lookup.array_index) * (s_op->metasidcnt));
    end_index   = start_index + s_op->metasidcnt;
    gossip_debug(GOSSIP_LOOKUP_DEBUG,
              "%s:start_index(%d) end_index(%d) lookup_path.sid_count(%d)\n"
              ,__func__
              ,start_index
              ,end_index
              ,s_op->resp.u.lookup_path.sid_count);
    for (i = start_index, j = 1; i < end_index; i++, j++)
    {
        s_op->resp.u.lookup_path.sid_array[i] =
                                 s_op->u.lookup.keyval_temp_store[j].sid;
        s_op->resp.u.lookup_path.sid_count++;
    }

    /* Does the handle's dspace entry reside locally or remotely?  If remotely,
     * then we are done.
     */
    for (i = start_index, j = 1; i < end_index; i++, j++)
    {
        if (PINT_cached_config_server_local(
                                &(s_op->u.lookup.keyval_temp_store[j].sid)))
        {
           break;
        }
    }
    if (i == end_index)
    {
       /* None of the sids identifies the local server */
       js_p->error_code = STATE_NOMORESEGS;

       /* But, the handle is valid; it just lives on another server */
       s_op->u.lookup.handle_ct++;

       return SM_ACTION_COMPLETE;
    }

    /* Copy the fsid and handle to the s_op structure for the acl check */
    s_op->target_handle = handle;
    s_op->target_fs_id = s_op->req->u.lookup_path.fs_id;

    /* get the dspace attributes for this object
     * (could be a directory or a metafile) */
    ret = job_trove_dspace_getattr(s_op->req->u.lookup_path.fs_id,
                                   handle,
                                   smcb,
                                   ds_attr,
                                   0,
                                   js_p,
                                   &j_id,
                                   server_job_context,
                                   s_op->req->hints);

    return ret;
}

/*
 * Function: lookup_verify_object_metadata
 *
 * Synopsis: Examine the metadata returned from the prelude sm.  If
 * the metadata is for a directory, prepare to read the handle of the
 * next segment, if there is one.  If the metadata is for a file,
 * prepare to send a response.
 *
 * If the object is a directory, this function sets the
 * s_op->u.lookup.segp value to point to the next segment to look up;
 * this is used in lookup_read_directory_entry.
 *
 * This function does not post an operation, but rather returns 1
 * immediately.
 */
static PINT_sm_action lookup_verify_object_metadata(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p = NULL;
    PVFS_ds_attributes *ds_attr = NULL;

    /* update our successful handle read count */
    s_op->u.lookup.handle_ct++;

    /* setup local variables. convert dspace attrs into sysint attrs.*/
    a_p     = &s_op->resp.u.lookup_path.attr_array[s_op->u.lookup.array_index];
    ds_attr = &(s_op->u.lookup.ds_attr_array[s_op->u.lookup.array_index]);

    PVFS_object_attr_from_ds_attr(a_p, ds_attr);
    a_p->mask = PVFS_ATTR_COMMON_ALL;

    /* update our successful attr read count */
    s_op->u.lookup.attr_ct++;

    /* set target_object_attr for processing in permissions checks, if 
     * this check is needed.
     */
    s_op->target_object_attr = a_p;


    assert(((a_p->objtype == PVFS_TYPE_DIRECTORY) ||
            (a_p->objtype == PVFS_TYPE_METAFILE)  ||
            (a_p->objtype == PVFS_TYPE_SYMLINK)));

    gossip_debug(
        GOSSIP_LOOKUP_DEBUG, "  attrs = (owner = %d, group = %d, "
        "perms = %o, type = %d)\n", a_p->owner, a_p->group,
        a_p->perms, a_p->objtype);

    /* if we hit a metafile in local dspace db,
     * then we know additional attributes are in the
     * local keyval db.  So, lets return what we can.
     */
    if (a_p->objtype == PVFS_TYPE_METAFILE)
    {
        gossip_debug(GOSSIP_LOOKUP_DEBUG, "  object is a metafile; "
                     "gathering keyval attributes from local server.....\n");

        js_p->error_code = LOOKUP_LOCAL_METAFILE_KEYVALS;
        return SM_ACTION_COMPLETE;
    }

    /*
     * if we hit a symlink, we're done; client will pick up the pieces
     * and continue to resolve the symlink if required
     */
    if (a_p->objtype == PVFS_TYPE_SYMLINK)
    {
        gossip_debug(GOSSIP_LOOKUP_DEBUG, "  object is a symlink; "
                     "halting lookup and sending response\n");

        js_p->error_code = STATE_ENOTDIR;
        return SM_ACTION_COMPLETE;
    }

    /* if we looked up all the segments, we are done */
    if (s_op->u.lookup.seg_nr == s_op->u.lookup.seg_ct)
    {
        gossip_debug(GOSSIP_LOOKUP_DEBUG, "  no more segments in path; "
                     "sending response\n");

        js_p->error_code = STATE_NOMORESEGS;
        return SM_ACTION_COMPLETE;
    }

    /* if we reach this point, the object is a directory. If this is not 
     * the first segment being looked up on this server, check permissions
     * by going to the check_perms state. (The first segment is checked when
     * the capability is checked by the prelude.)
     */
    if (s_op->u.lookup.seg_nr > 0)
    {
        js_p->error_code = LOOKUP_CHECK_PERMS;
        return SM_ACTION_COMPLETE;
    }

    return SM_ACTION_COMPLETE;
}





/*
 * Function: lookup_setup_getattr_request
 *
 * Synopsis: The object we are now processing is a
 * metafile and we know that its
 * keyval entries are on the local server as well.  
 * So, lets setup a getattr request
 * that will return as many keyval attributes as possible.
 *
 */
static PINT_sm_action lookup_setup_getattr_request(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
   int ret;
   struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
   struct PINT_server_op *getattr_op;

   js_p->error_code = 0;

   getattr_op = calloc(1,sizeof(*getattr_op));
   if ( !getattr_op )
   {
      js_p->error_code = -PVFS_ENOMEM;
      return SM_ACTION_COMPLETE;
   }
   
   getattr_op->attr = s_op->resp.u.lookup_path.attr_array[
                                               s_op->u.lookup.array_index];

   getattr_op->req = s_op->req;

   getattr_op->u.getattr.fs_id      = s_op->req->u.lookup_path.fs_id;
   getattr_op->u.getattr.handle     = s_op->resp.u.lookup_path.handle_array[
                                                    s_op->u.lookup.array_index ];
   getattr_op->u.getattr.attrmask   = PVFS_ATTR_META_DIST          |
                                      PVFS_ATTR_META_DFILES        |
                                      PVFS_ATTR_META_MIRROR_MODE   |
                                      PVFS_ATTR_CAPABILITY;
   getattr_op->u.getattr.credential = s_op->req->u.lookup_path.credential;

   ret = PINT_sm_push_frame(smcb, 0, getattr_op);
   if ( ret < 0 )
   {
      gossip_err("%s:Error pushing getattr frame onto lookup stack:ret(%d)\n",
                 __func__,ret);
      free(getattr_op);
      js_p->error_code = ret;
      return SM_ACTION_COMPLETE;
   }

   return SM_ACTION_COMPLETE;
}/*end lookup_setup_getattr_request*/



/*
 * Function: lookup_verify_getattr_results
 *
 * Synopsis: This getattr request is returning keyval entries for a metafile object.
 * Check the results and update local variables as necessary.
 *
 */
static PINT_sm_action lookup_verify_getattr_results(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
   struct PINT_server_op *getattr_op;
   struct PINT_server_op *s_op;
   int task_id;
   int remaining;
   int ret;
   PVFS_object_attr *resp_attr;

   getattr_op = PINT_sm_pop_frame(smcb, &task_id, &js_p->error_code, &remaining);

   if ( js_p->error_code )
   {
      goto out;
   }

   s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

   resp_attr = &(getattr_op->resp.u.getattr.attr);

   ret = PINT_copy_object_attr(&s_op->resp.u.lookup_path.attr_array[
                                              s_op->u.lookup.array_index],
                               resp_attr);
   if (ret)
   {
      gossip_err(
        "%s:Error copying metafile attributes from getattr to lookup:ret(%d)\n",
        __func__,
        ret);
      js_p->error_code = ret;
      goto out;
   }

out:
   free(getattr_op);
   return SM_ACTION_COMPLETE;
}/*end lookup_verify_getattr_results*/




/*                                                              
 * Function: lookup_check_perms
 * 
 * Synopsis: check to see whether the requesting user has permission to do
 * the lookup. This function checks the file mode (i.e. mask). If the file
 * mode doesn't provide permission, the SM will proceed to the check_acls
 * state.
 */
static PINT_sm_action lookup_check_perms(struct PINT_smcb *smcb,
                                         job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p = s_op->target_object_attr;
    PVFS_credential *cred = &(s_op->req->u.lookup_path.credential);
    PVFS_uid uid;
    PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS];
    uint32_t op_mask, num_groups;
    char mask_buf[16];
    int ret;

    /* If we get here with an invalid fsid and handle, we have to
     * return -PVFS_EACCESS 
     */
    if (s_op->target_fs_id == PVFS_FS_ID_NULL ||
        !PVFS_OID_cmp(&s_op->target_handle, &PVFS_HANDLE_NULL))
    {
        js_p->error_code = -PVFS_EACCES;
        return SM_ACTION_COMPLETE;
    }

    assert(a_p);

    js_p->error_code = 0;

    /* map the user using security */
    ret = PINT_map_credential(cred, &uid, &num_groups, group_array);
    if (ret != 0)
    {
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    PINT_debug_credential(cred,
                          "  lookup_check_perms",
                          uid,
                          num_groups,
                          group_array);

#ifdef ENABLE_SECURITY_CERT
    op_mask = 0;
    /* no capabilities for unsigned credential */
    if (!IS_UNSIGNED_CRED(cred))
    {
#endif
    /* retrieve the capabilities of the credential as a mask */
    ret = PINT_get_capabilities(NULL,
                                0,
                                uid,
                                group_array,
                                num_groups, 
                                a_p,
                                &op_mask);

    if (ret != 0)
    {
        /* Currently PINT_get_capabilities only returns 0 unless ACLs are 
         * being checked. This code is provided for future-proofing.
         */
        gossip_err("  lookup_check_perms: could not retrieve permissions mask "
                   "(%d)\n", ret);
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }
#ifdef ENABLE_SECURITY_CERT
    } /* if */
#endif

    gossip_debug(GOSSIP_LOOKUP_DEBUG, "  lookup_check_perms: op mask = %s\n",
                 PINT_print_op_mask(op_mask, mask_buf));
    
    /* must have executable permission */
    if ((op_mask & PINT_CAP_EXEC) == 0)
    {
        /* no file-mode permission--check ACLs */
#ifdef ENABLE_SECURITY_CERT
        /* don't check ACLs for unsigned cred */
        js_p->error_code = IS_UNSIGNED_CRED(cred) ? 0 : LOOKUP_CHECK_DIR_ACLS;
#else
        js_p->error_code = LOOKUP_CHECK_DIR_ACLS;
#endif
        return SM_ACTION_COMPLETE;
    }

    return SM_ACTION_COMPLETE;
}

/* Function: lookup_read_acls 
 *
 * Synopsis: Post a keyval DB read of the posix acls to check and see if 
 * directory traversal is allowed or not
 */
static PINT_sm_action lookup_read_directory_acls(struct PINT_smcb *smcb,
                                                 job_status_s* js_p)
{
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    /* If we get here with an invalid fsid and handle, we have to
     * return -PVFS_EACCESS 
     */
    if (s_op->target_fs_id == PVFS_FS_ID_NULL ||
        !PVFS_OID_cmp(&s_op->target_handle, &PVFS_HANDLE_NULL))
    {
        js_p->error_code = -PVFS_EACCES;
        return SM_ACTION_COMPLETE;
    }
    js_p->error_code = 0;

    memset(&s_op->key, 0, sizeof(PVFS_ds_keyval));
    memset(&s_op->val, 0, sizeof(PVFS_ds_keyval));
    s_op->key.buffer = "system.posix_acl_access";
    s_op->key.buffer_sz = strlen(s_op->key.buffer) + 1;
    s_op->val.buffer = (char *) malloc(PVFS_REQ_LIMIT_VAL_LEN);
    if (!s_op->val.buffer)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->val.buffer_sz = PVFS_REQ_LIMIT_VAL_LEN;

    gossip_debug(GOSSIP_LOOKUP_DEBUG,
                 "  About to retrieve acl keyvals for handle %s\n",
                 PVFS_OID_str(&s_op->target_handle));

    /* Read acl keys */
    ret = job_trove_keyval_read(s_op->target_fs_id,
                                s_op->target_handle,
                                &s_op->key,
                                &s_op->val,
                                0,
                                NULL,
                                smcb,
                                0,
                                js_p,
                                &j_id,
                                server_job_context,
                                s_op->req->hints);

    return ret;
}
/* 
 * Function lookup_check_acls
 *
 * Synopsis: check to see whether the requesting user has permission to do
 * the lookup. This function checks POSIX ACLs.
 */
static PINT_sm_action lookup_check_acls(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p = s_op->target_object_attr;
    PVFS_credential *cred = &(s_op->req->u.lookup_path.credential);
    PVFS_uid uid;
    PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS];
    uint32_t op_mask, num_groups;
    char mask_buf[16];
    int ret;

    assert(a_p);

    if (s_op->val.read_sz == 0)
    {
        /* No ACLs available--return EACCES */
        gossip_debug(GOSSIP_LOOKUP_DEBUG, "  lookup_check_acls: no acls\n");
        js_p->error_code = -PVFS_EACCES;
        goto cleanup;
    }

    ret = PINT_map_credential(cred, &uid, &num_groups, group_array);
    if (ret != 0)
    {
        js_p->error_code = -PVFS_EACCES;
        goto cleanup;
    }

    /* get the op mask given the ACLs */
    ret = PINT_get_capabilities(s_op->val.buffer,
                                s_op->val.read_sz, 
                                uid,
                                group_array,
                                num_groups,
                                a_p,
                                &op_mask);

    if (ret != 0)
    {
        /* unexpected error */
        gossip_err("  lookup_check_acls: could not retrieve permissions mask "
                   "(%d)\n", ret);
        js_p->error_code = -PVFS_EINVAL;
        goto cleanup;
    }

    gossip_debug(GOSSIP_LOOKUP_DEBUG, "  lookup_check_acls: op mask = %s\n",
                 PINT_print_op_mask(op_mask, mask_buf));

    /* must have executable permission */
    if ((op_mask & PINT_CAP_EXEC) == 0)
    {
        js_p->error_code = -PVFS_EACCES;
        goto cleanup;
    }

    /* success if we get here */
    js_p->error_code = 0;

cleanup:
    free(s_op->val.buffer);

    return SM_ACTION_COMPLETE;
}

/*
 * Function: lookup_read_num_directory_entry_handles
 *
 * Synopsis: Given a directory handle, determine how many handles are
 * used to store directory entries for this directory.
 *
 * Initializes key and value structures to direct num handles into
 * s_op->u.lookup.num_dirent_handles. The handle to use for the
 * read is either:
 * - the starting handle from the req (if we haven't looked up a
 *   segment yet), or
 * - the previous segment's handle (from response handle array).
 *
 * Posts the keyval read to trove.
 */
static PINT_sm_action lookup_read_num_directory_entry_handles(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);


    /* use the base handle if we haven't looked up a segment yet. In this
     * case, the dist_dir_attr values are already provided by the prelude
     * and are stored in s_op->attr.  No need to do another lookup.
     */

    if (s_op->u.lookup.seg_nr == 0)
    {
        /* copy dist_dir_attr data from s_op->attr to
         * s_op->u.lookup.attr.u.dir.dist_dir_attr */
        s_op->u.lookup.attr = s_op->attr;
        return SM_ACTION_COMPLETE;
    }
    else
    {
        s_op->u.lookup.attr =
               s_op->resp.u.lookup_path.attr_array[s_op->u.lookup.array_index];
        return SM_ACTION_COMPLETE;
    }


}

/*
 * Function: lookup_read_directory_entry_handles
 *
 * Synopsis: Given a directory handle, look up the handle used to
 * store directory entries for this directory.
 *
 * Initializes key and value structures to direct handle into
 * s_op->u.lookup.dirent_handle, which is where we always store the
 * handle used to read directory entries.  The handle to use for the
 * read is either:
 * - the starting handle from the req (if we haven't looked up a
 *   segment yet), or
 * - the previous segment's handle (from response handle array).
 *
 * Posts the keyval read to trove.
 */
static PINT_sm_action lookup_get_dirdata_from_keyval(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PVFS_handle handle = PVFS_HANDLE_NULL;
    job_id_t j_id;
    PVFS_object_attr *attr;
    int keyval_count;

    if (s_op->u.lookup.seg_nr == 0)
    {
        /* copy dist_dir_attr data from s_op->attr to
         * s_op->u.lookup.attr.u.dir.dist_dir_attr */
        s_op->u.lookup.attr = s_op->attr;
    }
    else
    {
        s_op->u.lookup.attr =
             s_op->resp.u.lookup_path.attr_array[s_op->u.lookup.array_index];
    }
    attr = &s_op->u.lookup.attr;


    assert(attr->u.dir.dist_dir_attr.dirdata_count > 0 &&
           attr->u.dir.dist_dir_attr.bitmap_size > 0);

    /* use the base handle if we haven't looked up a segment yet */
    if (s_op->u.lookup.seg_nr == 0)
    {
        handle = s_op->req->u.lookup_path.handle;
    }
    else
    {
        handle =
             s_op->resp.u.lookup_path.handle_array[s_op->u.lookup.array_index ];
    }

    gossip_debug(GOSSIP_LOOKUP_DEBUG,
            "lookup: get dist-dir-attr for dir meta handle %s "
            "with tree_height=%d, dirdata_count=%d, bitmap_size=%d, "
            "split_size=%d, server_no=%d and branch_level=%d\n",
            PVFS_OID_str(&handle),
            attr->u.dir.dist_dir_attr.tree_height,
            attr->u.dir.dist_dir_attr.dirdata_count,
            attr->u.dir.dist_dir_attr.bitmap_size,
            attr->u.dir.dist_dir_attr.split_size,
            attr->u.dir.dist_dir_attr.server_no,
            attr->u.dir.dist_dir_attr.branch_level);

    /* allocate space for bitmap and dirdata handles */
    attr->u.dir.dist_dir_bitmap =
            malloc(attr->u.dir.dist_dir_attr.bitmap_size *
                    sizeof(PVFS_dist_dir_bitmap_basetype));

    attr->u.dir.dirdata_handles =
                malloc(OSASZ(attr->u.dir.dist_dir_attr.dirdata_count,
                             attr->u.dir.dist_dir_attr.sid_count));

    if(!attr->u.dir.dist_dir_bitmap ||
            !attr->u.dir.dirdata_handles)
    {
        free(attr->u.dir.dist_dir_bitmap);
        free(attr->u.dir.dirdata_handles);
        js_p->error_code = -PVFS_ENOMEM;
        goto error_out;
    }

    /* Beginning of sids is immediately following the dirdata handles */
    attr->u.dir.dirdata_sids = 
                 (PVFS_SID *)&attr->u.dir.dirdata_handles[
                                    attr->u.dir.dist_dir_attr.dirdata_count];

    /* total 2 keyvals, DIST_DIRDATA_BITMAP, DIST_DIRDATA_HANDLES */
    keyval_count = 2;

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        free(attr->u.dir.dist_dir_bitmap);
        free(attr->u.dir.dirdata_handles);
        js_p->error_code = -PVFS_ENOMEM;
        goto error_out;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        goto error_out;
    }
    memset(s_op->val_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);

    s_op->key_a[0].buffer = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].size;

    s_op->val_a[0].buffer_sz =
            attr->u.dir.dist_dir_attr.bitmap_size *
            sizeof(PVFS_dist_dir_bitmap_basetype);
    s_op->val_a[0].buffer = attr->u.dir.dist_dir_bitmap;

    s_op->key_a[1].buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;

    s_op->val_a[1].buffer = attr->u.dir.dirdata_handles;
    s_op->val_a[1].buffer_sz = (attr->u.dir.dist_dir_attr.dirdata_count *
                                sizeof(PVFS_handle)) +
                               (attr->u.dir.dist_dir_attr.sid_count *
                                attr->u.dir.dist_dir_attr.dirdata_count *
                                sizeof(PVFS_SID));

    s_op->error_a = (PVFS_error*)calloc(keyval_count, sizeof(PVFS_error));
    if (!s_op->error_a)
    {
        free(attr->u.dir.dist_dir_bitmap);
        free(attr->u.dir.dirdata_handles);
        free(s_op->key_a);
        free(s_op->val_a);
        js_p->error_code = -PVFS_ENOMEM;
        goto error_out;
    }

    js_p->error_code = 0;

    ret = job_trove_keyval_read_list(
                    s_op->req->u.lookup_path.fs_id,
                    handle,
                    s_op->key_a,
                    s_op->val_a,
                    s_op->error_a,
                    keyval_count,
                    0,
                    NULL,
                    smcb,
                    0,
                    js_p,
                    &j_id,
                    server_job_context,
                    s_op->req->hints);

    return ret;


error_out:
    if ( attr->u.dir.dist_dir_bitmap )
    {
       free( attr->u.dir.dist_dir_bitmap );
       attr->u.dir.dist_dir_bitmap = NULL;
    }
    if ( attr->u.dir.dirdata_handles )
    {
       free( attr->u.dir.dirdata_handles );
       attr->u.dir.dirdata_handles = NULL;
    }
    if ( s_op->key_a )
    {
       free( s_op->key_a );
       s_op->val_a = NULL;
    }
    if ( s_op->val_a )
    {
       free( s_op->val_a );
       s_op->val_a = NULL;
    }
    if ( s_op->error_a )
    {
       free( s_op->error_a);
       s_op->error_a = NULL;
    }

    return SM_ACTION_COMPLETE;
}/* end lookup_get_dirdata_from_keyval */

/*
 * Function: lookup_read_directory_entry
 *
 * Synopsis: Given a handle for a dspace holding directory entries,
 * look up the current segment and obtain its handle.
 */
static PINT_sm_action lookup_compute_directory_entry_location(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    PVFS_dist_dir_hash_type dirdata_hash;
    int last_dirdata_sid_index=0;
    int i;

    /* Record the distributed directory bitmap and handles for the response. */
    ret = PINT_copy_object_attr(
          &s_op->resp.u.lookup_path.attr_array[s_op->u.lookup.array_index],
          &s_op->u.lookup.attr);
        
    /* find the segment that we should look up in the directory */
    ret = PINT_string_next_segment(s_op->req->u.lookup_path.path,
                                   &s_op->u.lookup.segp,
                                   &s_op->u.lookup.segstate);

    if (ret != 0)
    {
        gossip_err("%s:PINT_string_next_segment failed: path: %s\n",__func__,
                   s_op->req->u.lookup_path.path);
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }


    /* find the hash value for that segment */
    dirdata_hash = PINT_encrypt_dirdata(s_op->u.lookup.segp);
    gossip_debug(GOSSIP_LOOKUP_DEBUG,
                 "lookup: encrypt dirent %s into hash value %llu.\n",
                 s_op->u.lookup.segp, llu(dirdata_hash));


    /* determine which dirdata handle hosts that segment */
    s_op->u.lookup.dirdata_server_index =
                    PINT_find_dist_dir_bucket(
                                    dirdata_hash,
                                    &s_op->u.lookup.attr.u.dir.dist_dir_attr,
                                    s_op->u.lookup.attr.u.dir.dist_dir_bitmap);

    /* thus, the dirdata handle is 
     * s_op->u.lookup.attr.u.dir.dirdata_handles[dirdata_server_index]
     * and the sids associated with that dirdata handle are
     * s_op->u.lookup.attr.u.dir.dirdata_sids[dirdata_server_index * metasidcnt]...
     *                                       [(dirdata_server_index * metasidcnt) +
     *                                        (metasidcnt - 1)]
     */
    s_op->u.lookup.dirdata_sid_index = (s_op->u.lookup.dirdata_server_index * s_op->metasidcnt);

    gossip_debug(GOSSIP_LOOKUP_DEBUG,
                 "lookup: selecting bucket No.%d from dist_dir_bitmap.\n",
                 s_op->u.lookup.dirdata_server_index);
    gossip_debug(GOSSIP_LOOKUP_DEBUG,
                 "  need to read from dirent handle=%s, segment=%s (len=%d)\n",
                 PVFS_OID_str(&s_op->u.lookup.attr.u.dir.dirdata_handles[
                                       s_op->u.lookup.dirdata_server_index]),
                 s_op->u.lookup.segp, (int) strlen(s_op->u.lookup.segp));

    /* For that dirdata handle, do any of its sids identify the local machine? 
     * If not, then we start with the first one in the list.  MSGPAIR will access 
     * the other sids, if the first one fails.
     */
    last_dirdata_sid_index = s_op->u.lookup.dirdata_sid_index + s_op->metasidcnt;
    for (i = s_op->u.lookup.dirdata_sid_index; i < last_dirdata_sid_index; i++)
    {
        if (PINT_cached_config_server_local(&s_op->u.lookup.attr.u.dir.dirdata_sids[i]))
        {
           gossip_debug(GOSSIP_LOOKUP_DEBUG, "lookup: local server !!!\n");
           js_p->error_code = LOCAL_DIRENT;
           break;
        }
    }

    if ( i == last_dirdata_sid_index )
    {   
        gossip_debug(GOSSIP_LOOKUP_DEBUG, "lookup: remote server !!!\n");
        js_p->error_code = REMOTE_DIRENT;
    }

    return SM_ACTION_COMPLETE;
}/* lookup_compute_directory_entry_location */





static PINT_sm_action lookup_read_directory_entry_local(
        struct PINT_smcb *smcb,
        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t j_id;
    int ret = -PVFS_EINVAL;

    js_p->error_code = 0;

    s_op->key.buffer = s_op->u.lookup.segp;
    s_op->key.buffer_sz = strlen(s_op->u.lookup.segp) + 1;

    /* TJS: Read in SID information to temporary location.  Copy back into
     * response array in next state */
    s_op->u.lookup.keyval_temp_store = (PVFS_ID *)malloc(sizeof(PVFS_handle) +
                                                         (sizeof(PVFS_SID) * 
                                                          s_op->metasidcnt));


    
    s_op->val.buffer = s_op->u.lookup.keyval_temp_store;

    /* s_op->val.buffer_sz = sizeof(PVFS_handle) + 
                          (s_op->metasidcnt * sizeof(PVFS_SID)); */
    s_op->val.buffer_sz = OSASZ(1, s_op->metasidcnt);

    ret = job_trove_keyval_read(s_op->req->u.lookup_path.fs_id,
                                s_op->u.lookup.attr.u.dir.dirdata_handles[
                                          s_op->u.lookup.dirdata_server_index],
                                &s_op->key, 
                                &s_op->val,
                                TROVE_KEYVAL_DIRECTORY_ENTRY,
                                NULL, 
                                smcb, 
                                0, 
                                js_p, 
                                &j_id,
                                server_job_context, 
                                s_op->req->hints);

    return ret;
}

static PINT_sm_action lookup_read_directory_entry_remote(struct PINT_smcb *smcb,
                                                         job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = NULL;
    int ret;
    PVFS_capability capability;

    gossip_debug(GOSSIP_LOOKUP_DEBUG, "lookup state: read_directory_entry_remote\n");


    PINT_msgpair_init(&s_op->msgarray_op);
    msg_p = &s_op->msgarray_op.msgpair;
    PINT_serv_init_msgarray_params(s_op, s_op->req->u.lookup_path.fs_id);

    PINT_null_capability(&capability);

    PINT_SERVREQ_MGMT_GET_DIRENT_FILL(msg_p->req,
                                      capability,
                                      s_op->req->u.lookup_path.fs_id,
                                      s_op->u.lookup.attr.u.dir.dirdata_handles[
                                                   s_op->u.lookup.dirdata_server_index],
                                      s_op->u.lookup.segp,
                                      NULL);

    PINT_cleanup_capability(&capability);

    msg_p->msgclass = PVFS_IO_METADATA;
    msg_p->msgdir = PVFS_IO_READ;
    msg_p->fs_id = s_op->req->u.lookup_path.fs_id;
    msg_p->handle =
        s_op->u.lookup.attr.u.dir.dirdata_handles[
                                          s_op->u.lookup.dirdata_server_index];
        /* dir objects are all metadata so sid counts are the same */
    msg_p->sid_count = s_op->u.lookup.attr.meta_sid_count;
    msg_p->sid_index = 0;
    msg_p->sid_array = &s_op->u.lookup.attr.u.dir.dirdata_sids[
                                                     s_op->u.lookup.dirdata_sid_index];
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = lookup_get_dirent_comp_fn;

    gossip_debug(GOSSIP_LOOKUP_DEBUG,
                 "reading remote dirent %s from dirdata handle %s sid %s\n",
                 s_op->u.lookup.segp, PVFS_OID_str(&msg_p->handle),
                 PVFS_SID_str(&msg_p->sid_array[0]));
#if 0
    ret = PINT_cached_config_map_to_server(
        &msg_p->svr_addr, msg_p->handle, msg_p->fs_id);
#endif
    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map dirdata server address\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int lookup_get_dirent_comp_fn(void *v_p,
                                     struct PVFS_server_resp *resp_p,
                                     int index)
{
    PINT_smcb *smcb = v_p;
    PINT_smcb *parent_smcb = smcb->parent_smcb;
    PINT_server_op *s_op = PINT_sm_frame(parent_smcb, (PINT_MSGPAIR_PARENT_SM));

    assert(resp_p->op == PVFS_SERV_MGMT_GET_DIRENT);

    if (resp_p->status == 0 && resp_p->u.mgmt_get_dirent.error == 0)
    {
        s_op->resp.u.lookup_path.handle_array[s_op->u.lookup.seg_nr-1] =
                 resp_p->u.mgmt_get_dirent.handle;

        /*becky: copy sids from response to lookup area */

        gossip_debug(GOSSIP_LOOKUP_DEBUG,
                     "  lookup_get_dirent_comp_fn: got dirent handle %s\n",
                     PVFS_OID_str(&resp_p->u.mgmt_get_dirent.handle));
    }
    return resp_p->u.mgmt_get_dirent.error;
}

static PINT_sm_action lookup_setup_resp(struct PINT_smcb *smcb,
                                        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    /*
     * NOTE: we may have handle_count N and sid_count N*metasidcnt
     * with attr_count N-1 in the case that another meta-server needs to 
     * continue with the path (attr) lookup.  otherwise, we're returning 
     * N handles, N*metasidcnt, and  N attrs.
     */
    s_op->resp.u.lookup_path.handle_count = s_op->u.lookup.handle_ct;
    s_op->resp.u.lookup_path.attr_count   = s_op->u.lookup.attr_ct;

    if (s_op->resp.u.lookup_path.handle_count ||
        s_op->resp.u.lookup_path.attr_count)
    {
        js_p->error_code = 0;
    }
    else if (js_p->error_code < 0)
    {
        /* preserve error code in this case and fall through */
        gossip_debug(GOSSIP_LOOKUP_DEBUG, "  lookup error in previous step\n");
    }
    else
    {
        js_p->error_code = -PVFS_ENOENT;
    }

    gossip_debug(GOSSIP_LOOKUP_DEBUG, "  sending '%s' response with %d "
                 "handle(s) and %d attr(s)\n",
                 (js_p->error_code ? "error" : "success"),
                 s_op->resp.u.lookup_path.handle_count,
                 s_op->resp.u.lookup_path.attr_count);

    /* end timer */
    PINT_perf_timer_end(PINT_server_tpc, PINT_PERF_TLOOKUP, &s_op->start_time);

    if (js_p->error_code == 0)
    {
        PINT_ACCESS_DEBUG(s_op,
                          GOSSIP_ACCESS_DEBUG,
                          "path: %s, handle: %s\n", 
                          s_op->req->u.lookup_path.path, 
                          PVFS_OID_str(&s_op->resp.u.lookup_path.handle_array[
                                   s_op->resp.u.lookup_path.handle_count]));
    }                               /* handle_count -1 or 0 */
    else
    {
        PINT_ACCESS_DEBUG(
            s_op, GOSSIP_ACCESS_DEBUG, "path: %s, lookup failed\n", 
            s_op->req->u.lookup_path.path);
    }


    gossip_debug(GOSSIP_LOOKUP_DEBUG
                 ,"%s:PVFS_servresp_lookup_path\n"
                  "\thandle_count(%d) handle(%s)\n"
                  "\tattr_count(%d)\n"
                  "\tsid_count(%d)\n"
                 ,__func__
                 ,s_op->resp.u.lookup_path.handle_count
                 ,s_op->resp.u.lookup_path.handle_count>0 ?
                      PVFS_OID_str(&s_op->resp.u.lookup_path.handle_array[0]) :
                      "none"
                 ,s_op->resp.u.lookup_path.attr_count
                 ,s_op->resp.u.lookup_path.sid_count);

   int i;
   for (i = 0; i < s_op->resp.u.lookup_path.sid_count; i++)
   {
       gossip_debug(GOSSIP_LOOKUP_DEBUG
                   ,"%s:sid[%d]=(%s)\n"
                   ,__func__
                   ,i
                   ,PVFS_SID_str(&s_op->resp.u.lookup_path.sid_array[i]));
   }

    return SM_ACTION_COMPLETE;
}

/*
 * Function: lookup_cleanup
 *
 * Synopsis: Free memory allocated during request processing.
 *
 * There are a bunch of regions that must be freed after processing
 * completes:
 * - decoded request (s_op->decoded)
 * - encoded request (s_op->unexp_bmi_buff.buffer)
 * - encoded response (s_op->encoded)
 * - original (decoded) response (s_op->resp)
 * - dynamically allocated space (in this case 
 *   s_op->resp.u.lookup_path.handle_array)
 * - the server operation structure itself
 */
static PINT_sm_action lookup_cleanup(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (s_op->resp.u.lookup_path.handle_array)
    {
        free(s_op->resp.u.lookup_path.handle_array);
        s_op->resp.u.lookup_path.handle_array = NULL;
    }

    if (s_op->u.lookup.ds_attr_array)
    {
        free(s_op->u.lookup.ds_attr_array);
        s_op->u.lookup.ds_attr_array = NULL;
    }

    free(s_op->u.lookup.attr.u.dir.dist_dir_bitmap);
    s_op->u.lookup.attr.u.dir.dist_dir_bitmap = NULL;
    free(s_op->u.lookup.attr.u.dir.dirdata_handles);
    s_op->u.lookup.attr.u.dir.dirdata_handles = NULL;

    free(s_op->key_a);
    s_op->key_a = NULL;
    free(s_op->val_a);
    s_op->val_a = NULL;
    free(s_op->error_a);
    s_op->error_a = NULL;

    return(server_state_machine_complete(smcb));
}

static int perm_lookup(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_EXEC)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}
PINT_GET_CREDENTIAL_DEFINE(lookup_path);
PINT_GET_OBJECT_REF_DEFINE(lookup_path);

struct PINT_server_req_params pvfs2_lookup_params = 
{
    .string_name = "lookup",
    .perm = perm_lookup,
/*    .access_type = PINT_server_req_readonly, */
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_credential = PINT_get_credential_lookup_path,
    .get_object_ref = PINT_get_object_ref_lookup_path,
    .state_machine = &pvfs2_lookup_sm
};


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
