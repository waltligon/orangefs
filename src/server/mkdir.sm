/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */


#include <string.h>
#include <assert.h>

#include "pvfs2-config.h"
#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-util.h"
#include "pvfs2-internal.h"
#include "pint-util.h"
#include "pint-perf-counter.h"
#include "pint-security.h"
#include "pint-cached-config.h"
#include "pvfs2-dist-basic.h"
#include "dist-dir-utils.h"
#include "pint-uid-map.h"


enum 
{
    SKIP = 100,
};

static int tree_setattr_comp_fn(
        void *v_p,
        struct PVFS_server_resp *resp_p,
        int index);

%%

nested machine pvfs2_mkdir_work_sm
{
    state prep_sm
    {
        run mkdir_prep_sm;
        default => create;
    }

    state create
    {
        run mkdir_directory_dspace_create;
        success => set_attrib;
        default => err_msg;
    }

    state set_attrib
    {
        run mkdir_directory_dspace_setattr;
        success => create_dist_dir_struct;
        default => err_msg;
    }

    state create_dist_dir_struct
    {
        run mkdir_create_dist_dir_struct;
        success => create_local_dirdata_dspace;
        default => err_msg;
    }

    state create_local_dirdata_dspace
    {
        run mkdir_dirdata_dspace_create;
        success => setattr_on_local_dirdata_dspace;
        default => err_msg;
    }

    state setattr_on_local_dirdata_dspace
    {
        run mkdir_dirdata_dspace_setattr;
        success => get_remote_dirdata_handles;
        default => err_msg;
    }

    state get_remote_dirdata_handles
    {
        run mkdir_get_remote_dirdata_handles;
        SKIP    => setattr_on_directory_keyval;
        success => fill_handles_to_dist_dir_struct;
        default => err_msg;
    }

    state fill_handles_to_dist_dir_struct
    {
        run mkdir_fill_handles_to_dist_dir_struct;
        default => remote_dirdata_attr_and_keyval_setup_msgpair;
    }

    state remote_dirdata_attr_and_keyval_setup_msgpair
    {
        run mkdir_remote_dirdata_attr_and_keyval_setup_msgpair;
        success => remote_dirdata_attr_and_keyval_xfer_msgpair;
        default => err_msg;
    }

    state remote_dirdata_attr_and_keyval_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => setattr_on_directory_keyval;
        default => err_msg;
    }

    state setattr_on_directory_keyval
    {
        run mkdir_directory_keyval_setattr;
        success => setattr_on_dirdata_keyval;
        default => err_msg;
    }

    state setattr_on_dirdata_keyval
    {
        run mkdir_dirdata_keyval_setattr;
        success => return;
        default => err_msg;
    }

    state err_msg 
    {
        run mkdir_error;
        default => return;
    }
}

machine pvfs2_mkdir_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => work;
        default => final_response;
    }

    state work
    {
        jump pvfs2_mkdir_work_sm;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run mkdir_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: mkdir_create
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *
 * NOTE: returned handle will pop out in js_p->handle (the job status
 * struct).
 */
static PINT_sm_action mkdir_directory_dspace_create(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    job_id_t i;

    gossip_debug(GOSSIP_MKDIR_DEBUG, " creating dspace on coll_id %d\n",
                 s_op->u.mkdir.fs_id);

    gossip_debug(
        GOSSIP_MKDIR_DEBUG, " directory handle will "
        "be in starting hrange[0] %llu-%llu\n",
        llu(s_op->u.mkdir.handle_extent_array.extent_array[0].first),
        llu(s_op->u.mkdir.handle_extent_array.extent_array[0].last));

    ret = job_trove_dspace_create(s_op->u.mkdir.fs_id,
                                  &s_op->u.mkdir.handle_extent_array,
                                  PVFS_TYPE_DIRECTORY,
                                  NULL,
                                  TROVE_SYNC, 
                                  smcb,
                                  0,
                                  js_p,
                                  &i,
                                  server_job_context,
                                  s_op->req->hints);

    return ret;
}

/*
 * Function: mkdir_directory_dspace_setattr
 *
 * Params:   server_op *s_op, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: 
 *           
 */
static PINT_sm_action mkdir_directory_dspace_setattr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_ds_attributes *ds_attr = NULL;

    /* save the handle generated from job_trove_dspace_create
     * into the response structure 
     * and PVFS_ds_attributes structure
     */
    s_op->resp.u.mkdir.handle = js_p->handle;
    s_op->ds_attr.handle      = js_p->handle;

    gossip_debug(GOSSIP_MKDIR_DEBUG, " *** new directory has handle %llu\n",
                 llu(js_p->handle));

    ds_attr = (&s_op->ds_attr);

    PVFS_ds_init_time(ds_attr);

    gossip_debug(GOSSIP_MKDIR_DEBUG, " setting directory version to "
                 "%llu\n\tmtime is %llu\n", llu(ds_attr->mtime),
                 llu(PINT_util_mkversion_time(ds_attr->mtime)));
    gossip_debug(GOSSIP_MKDIR_DEBUG, "%s:ds_attr->type(%d) ds_attr->handle(%llu) js_p->handle(%llu) uid(%d) gid(%d) mode(%o)\n"
                ,__func__
                ,ds_attr->type
                ,llu(ds_attr->handle)
                ,llu(s_op->resp.u.mkdir.handle)
                ,ds_attr->uid
                ,ds_attr->gid
                ,ds_attr->mode);

    ret = job_trove_dspace_setattr(s_op->u.mkdir.fs_id,
                                   ds_attr->handle,
                                   ds_attr,
                                   TROVE_SYNC,
                                   smcb,
                                   0,
                                   js_p,
                                   &j_id,
                                   server_job_context,
                                   s_op->req->hints);

    return ret;
}

/* init dist_dir_struct in s_op->attr.u.dir and s_op->u.mkdir */
static PINT_sm_action mkdir_create_dist_dir_struct(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr;
    int num_total_dirdata_servers=0, num_initial_dirdata_servers=0, num_meta=0,
        split_size=0;
    server_configuration_s *user_opts = PINT_server_config_mgr_get_config();
    int ret = -1;
    unsigned char *c;
    int i;

    attr = (&s_op->attr);

    /* if received >0, use; else use config_file value,*/
    if(s_op->req->u.mkdir.distr_dir_servers_max > 0)
    {
        num_total_dirdata_servers = s_op->req->u.mkdir.distr_dir_servers_max;
    }
    else
    {
        num_total_dirdata_servers = user_opts->distr_dir_servers_max;
    }

    /* if received >0, use; else use config_file value,*/
    if(s_op->req->u.mkdir.distr_dir_servers_initial > 0)
    {
        num_initial_dirdata_servers = s_op->req->u.mkdir.distr_dir_servers_initial;
    }
    else
    {
        num_initial_dirdata_servers = user_opts->distr_dir_servers_initial;
    }

    /* if received >0, use; else use config_file value,*/
    if(s_op->req->u.mkdir.distr_dir_split_size > 0)
    {
        split_size = s_op->req->u.mkdir.distr_dir_split_size;
    }
    else
    {
        split_size = user_opts->distr_dir_split_size;
    }

    /* Check to make sure too many dirdata servers were not requested. */
    ret = PINT_cached_config_get_num_meta(s_op->u.mkdir.fs_id, &num_meta);
    if(ret < 0)
    {
        gossip_err("Error: failed to get number of metadata servers\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }

    if(num_initial_dirdata_servers > num_total_dirdata_servers)
    {
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }
    if(num_initial_dirdata_servers > num_meta)
    {
        num_initial_dirdata_servers = num_meta;
    }
    if(num_total_dirdata_servers > num_meta)
    {
        num_total_dirdata_servers = num_meta;
    }

    /* set num_dirdata_servers for pre-allocation of dirdata handles */
    s_op->u.mkdir.num_dirdata_servers = num_total_dirdata_servers;

    /* init meta handle dist_dir_struct */
    ret = PINT_init_dist_dir_state(&attr->dist_dir_attr,
                                   &attr->dist_dir_bitmap,
                                   num_total_dirdata_servers,
                                   0,
                                   num_initial_dirdata_servers,
                                   split_size);

    assert(ret == 0);

    gossip_debug(GOSSIP_MKDIR_DEBUG, 
            "mkdir: Init dist-dir-attr for dir meta handle %llu "
            "with tree_height=%d, num_servers=%d, bitmap_size=%d, "
            "split_size=%d, server_no=%d and branch_level=%d\n",
            llu(s_op->resp.u.mkdir.handle),
            attr->dist_dir_attr.tree_height,
            attr->dist_dir_attr.num_servers,
            attr->dist_dir_attr.bitmap_size,
            attr->dist_dir_attr.split_size,
            attr->dist_dir_attr.server_no,
            attr->dist_dir_attr.branch_level);

    /* gossip bitmap, may adjust later */
    gossip_debug(GOSSIP_MKDIR_DEBUG,
            "mkdir: Init dist_dir_bitmap as:\n");
    for(i = attr->dist_dir_attr.bitmap_size - 1; i >= 0 ; i--)
    {
        c = (unsigned char *)(attr->dist_dir_bitmap + i);
        gossip_debug(GOSSIP_MKDIR_DEBUG,
                " i=%d : %02x %02x %02x %02x\n",
                i, c[3], c[2], c[1], c[0]);
    }
    gossip_debug(GOSSIP_MKDIR_DEBUG, "\n");

    /* allocate dirdata handle space, similar to create.sm */
    attr->dirdata_handles = malloc(
            sizeof(*attr->dirdata_handles) *
            num_total_dirdata_servers);
    s_op->u.mkdir.handle_array_local = malloc(
            sizeof(*s_op->u.mkdir.handle_array_local) *
            num_total_dirdata_servers);
    s_op->u.mkdir.handle_array_remote = malloc(
            sizeof(*s_op->u.mkdir.handle_array_remote) *
            num_total_dirdata_servers);

    if(!attr->dirdata_handles ||
            !s_op->u.mkdir.handle_array_local ||
            !s_op->u.mkdir.handle_array_remote )
    {
        free(attr->dirdata_handles);
        free(s_op->u.mkdir.handle_array_local);
        free(s_op->u.mkdir.handle_array_remote);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    return SM_ACTION_COMPLETE; 
}

static PINT_sm_action mkdir_dirdata_dspace_create(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr GCC_UNUSED;
    int ret = -PVFS_ENOMEM;
    job_id_t tmp_id;
    PVFS_handle_extent_array extent_array;
    server_configuration_s *user_opts = PINT_server_config_mgr_get_config();

    attr = (&s_op->attr);

    assert(s_op->u.mkdir.num_dirdata_servers > 0);

    /* dirdata on every meta server */
    s_op->u.mkdir.handle_array_local_count = 1;
    s_op->u.mkdir.handle_array_remote_count = 
        s_op->u.mkdir.num_dirdata_servers - 1;

    gossip_debug(GOSSIP_MKDIR_DEBUG, "creating %d local dirdata files\n", 
        s_op->u.mkdir.handle_array_local_count);
    gossip_debug(GOSSIP_MKDIR_DEBUG, "creating %d remote dirdata files\n", 
        s_op->u.mkdir.handle_array_remote_count);


    ret = PINT_config_get_meta_handle_extent_array(
        user_opts, s_op->u.mkdir.fs_id, &extent_array);
    assert(ret == 0);
    assert(extent_array.extent_count > 0);

    gossip_debug(GOSSIP_MKDIR_DEBUG, " local dirdata handle(s) will "
                 "be in starting hrange[0] %llu-%llu\n",
                 llu(extent_array.extent_array[0].first),
                 llu(extent_array.extent_array[0].last));

    ret = job_trove_dspace_create_list(s_op->req->u.mkdir.fs_id,
                                       &extent_array,
                                       s_op->u.mkdir.handle_array_local,
                                       s_op->u.mkdir.handle_array_local_count,
                                       PVFS_TYPE_DIRDATA, 
                                       NULL,
                                       TROVE_SYNC,
                                       smcb,
                                       0,
                                       js_p,
                                       &tmp_id,
                                       server_job_context, 
                                       s_op->req->hints);

    free(extent_array.extent_array);

    return(ret);
}



static PINT_sm_action mkdir_dirdata_dspace_setattr(struct PINT_smcb *smcb,
                                                   job_status_s *js_p)
{
   struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
   int ret = -PVFS_EINVAL;
   job_id_t j_id;

   /* s_op->ds_attr is filled in by prep_sm state.
    */
   PVFS_ds_attributes *ds_attr = &s_op->ds_attr;

   s_op->attr.dirdata_handles[0] = s_op->u.mkdir.handle_array_local[0];

   ds_attr->type   = PVFS_TYPE_DIRDATA;
   ds_attr->fs_id  = s_op->req->u.mkdir.fs_id;
   ds_attr->handle = s_op->u.mkdir.handle_array_local[0];
   ds_attr->uid    = s_op->attr.owner;
   ds_attr->gid    = s_op->attr.group;
   ds_attr->mode   = s_op->attr.perms;

   ds_attr->ctime = time(NULL);
   ds_attr->atime = ds_attr->ctime;
   ds_attr->mtime = ds_attr->ctime;

   gossip_debug(GOSSIP_MKDIR_DEBUG,"%s:ds_attr->handle(%llu) uid(%d) gid(%d) mode(%o)\n"
                                  ,__func__
                                  ,llu(ds_attr->handle)
                                  ,ds_attr->uid
                                  ,ds_attr->gid
                                  ,ds_attr->mode);
 

   ret = job_trove_dspace_setattr( s_op->req->u.mkdir.fs_id,
                                   ds_attr->handle,
                                   ds_attr,
                                   TROVE_SYNC,
                                   smcb, 0, js_p, &j_id, server_job_context, 
                                   s_op->req->hints);

   return (ret);
}/* end setattr_on_local_dirdata_dspace */




static PINT_sm_action mkdir_get_remote_dirdata_handles(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    gossip_debug(
        GOSSIP_MKDIR_DEBUG, "  local dirdata handle (%llu)\n",
        llu(s_op->u.mkdir.handle_array_local[0]));

    if(s_op->u.mkdir.handle_array_remote_count == 0)
    {
        js_p->error_code = SKIP;
        return(SM_ACTION_COMPLETE);
    }

    ret = job_precreate_pool_get_handles(
                    s_op->req->u.mkdir.fs_id,
                    s_op->u.mkdir.handle_array_remote_count,
                    PVFS_TYPE_DIRDATA,
                    NULL, /* server string set to NULL for now */
                    s_op->u.mkdir.handle_array_remote,
                    0,
                    smcb,
                    0,
                    js_p,
                    &j_id,
                    server_job_context,
                    s_op->req->hints);

    return ret;

}

static PINT_sm_action mkdir_fill_handles_to_dist_dir_struct(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr = NULL;
    int i,j;
    int num_handles = 0;
    PVFS_handle *handle_array = NULL;
    int ret;

    attr = &s_op->attr;

    /* dirdata_handles[0] was set in a previous state; so, all we need to do
     * here is gather up the remote handles.
     */
    for(i = 1,j=0; i < s_op->u.mkdir.num_dirdata_servers; i++,j++)
    {
        attr->dirdata_handles[i] = s_op->u.mkdir.handle_array_remote[j];
    }

    gossip_debug(GOSSIP_MKDIR_DEBUG, 
            "\t mkdir: dirdata handles array of directory %llu.\n",
            llu(s_op->resp.u.mkdir.handle));

    for(i=0; i<s_op->u.mkdir.num_dirdata_servers; i++)
    {
        gossip_debug(GOSSIP_MKDIR_DEBUG, 
                "\t\tdirdata server %d: %llu.\n",
                i, llu(attr->dirdata_handles[i]));
    }

    /* Make a capability for requests dealing with these handles. */
    /* First, create new handle array with target handle and dirdata handles */
    num_handles = s_op->u.mkdir.num_dirdata_servers + 1;
    handle_array = (PVFS_handle *) malloc(num_handles * sizeof(PVFS_handle));
    if (handle_array == NULL)
    {
        gossip_err("mkdir: out of memory in %s\n", __func__);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    handle_array[0] = s_op->resp.u.mkdir.handle;
    memcpy((handle_array + 1),
           attr->dirdata_handles,
           s_op->attr.dist_dir_attr.num_servers * sizeof(PVFS_handle));

    /* create new capability -- note that handle_array will be freed by
       PINT_cleanup_capability when the SM completes */
    ret = PINT_server_to_server_capability(&s_op->u.mkdir.server_to_server_capability,
                                           s_op->target_fs_id,
                                           num_handles,
                                           handle_array);
    if (ret != 0)
    {
        gossip_err("mkdir: unable to retrieve server-to-server "
                   "capability in %s\n", __func__);
        js_p->error_code = -PVFS_EACCES;
        return SM_ACTION_COMPLETE;
    }

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action mkdir_remote_dirdata_attr_and_keyval_setup_msgpair(
          struct PINT_smcb *smcb, 
          job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_object_attr attr;
    int ret;

    gossip_debug(GOSSIP_MKDIR_DEBUG, "mkdir state: send_remote_dir_data\n");

    /* !!! set dirdata attr, set all the static component */
    memcpy(&attr, &s_op->req->u.mkdir.attr, sizeof(attr));
    attr.objtype = PVFS_TYPE_DIRDATA;
    PINT_dist_dir_attr_copyto(attr.dist_dir_attr, s_op->attr.dist_dir_attr);
    attr.dirdata_handles = s_op->attr.dirdata_handles;
    attr.dist_dir_bitmap = s_op->attr.dist_dir_bitmap;
    attr.mask = PVFS_ATTR_COMMON_ALL;
    attr.mask |= PVFS_ATTR_DISTDIR_ATTR;

    gossip_debug(
        GOSSIP_MKDIR_DEBUG,
        "  SENDING attrs: [owner = %d, group = %d\n\t"
        "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
        "ctime = %llu ]\n",
        attr.owner, attr.group, attr.perms,
        attr.objtype, llu(attr.atime),
        llu(PINT_util_mkversion_time(attr.mtime)), llu(attr.ctime));

    PINT_msgpair_init(&s_op->msgarray_op);
    msg_p = &s_op->msgarray_op.msgpair;
    PINT_serv_init_msgarray_params(s_op, s_op->u.mkdir.fs_id);


    PINT_SERVREQ_TREE_SETATTR_FILL(msg_p->req,
                                   s_op->u.mkdir.server_to_server_capability,
                                   s_op->req->u.mkdir.credential,
                                   s_op->u.mkdir.fs_id,
                                   PVFS_TYPE_DIRDATA,
                                   attr,
                                   0,
                                   s_op->u.mkdir.handle_array_remote_count,
                                   /*s_op->attr.dist_dir_attr.num_servers,*/
                                   s_op->u.mkdir.handle_array_remote,
                                   /*s_op->attr.dirdata_handles,*/
                                   NULL);

    s_op->u.mkdir.saved_attr = &msg_p->req.u.mkdir.attr;

    msg_p->fs_id = s_op->u.mkdir.fs_id;
    msg_p->handle = s_op->u.mkdir.handle_array_remote[0]; 
                     /*s_op->attr.dirdata_handles[1]; */
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = tree_setattr_comp_fn;

    ret = PINT_cached_config_map_to_server(&msg_p->svr_addr,
                                           msg_p->handle,
                                           msg_p->fs_id);

    if (ret)
    {
        gossip_err("Failed to map dirdata server address\n");
        js_p->error_code = ret;
    }

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static int tree_setattr_comp_fn(void *v_p,
                                struct PVFS_server_resp *resp_p,
                                int index)
{
    PINT_smcb *smcb = v_p;
    PINT_sm_msgarray_op *mop = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = &mop->msgpair;;

    assert(msg_p->req.op == PVFS_SERV_TREE_SETATTR);
    PINT_free_object_attr(&(msg_p->req).u.tree_setattr.attr);
    return 0;
}

static PINT_sm_action mkdir_directory_keyval_setattr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr, *pattr;
    int ret = -1;
    job_id_t j_id;
    int k = 0;
    int slen; /* length of conversion strings */

    /* total 3 keyvals:
     * PVFS_DIST_DIR_ATTR, PVFS_DIRDATA_BITMAP, PVFS_DIRDATA_HANDLES */
    int keyval_count = 3;

    attr = &s_op->attr;
    pattr = &s_op->req->u.mkdir.attr;

    /* we need to know how many attributes we are going to set 
     * before we can allocated the key_a and val_a arrays
     */
    if (pattr->mask & PVFS_ATTR_DIR_HINT)
    {
        if (pattr->u.dir.hint.dfile_count > 0)
        {
            keyval_count++;
        }
        if (pattr->u.dir.hint.dist_name_len > 0)
        {
            keyval_count++;
        }
        if (pattr->u.dir.hint.dist_params_len > 0)
        {
            keyval_count++;
        }
        if (pattr->u.dir.hint.layout.algorithm > 0)
        {
            keyval_count++;
        }
        if (pattr->u.dir.hint.layout.server_list.count > 0)
        {
            keyval_count++;
        }
    }

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        free(s_op->key_a);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(s_op->val_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);

    s_op->key_a[0].buffer = Trove_Common_Keys[DIST_DIR_ATTR_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[DIST_DIR_ATTR_KEY].size;

    s_op->val_a[0].buffer = &attr->dist_dir_attr;
    s_op->val_a[0].buffer_sz = sizeof(attr->dist_dir_attr);
    keep_keyval_buffers(s_op, 0);

    s_op->key_a[1].buffer = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].size;

    s_op->val_a[1].buffer = attr->dist_dir_bitmap;
    s_op->val_a[1].buffer_sz =
                    attr->dist_dir_attr.bitmap_size * 
                    sizeof(PVFS_dist_dir_bitmap_basetype);
    keep_keyval_buffers(s_op, 1);

    s_op->key_a[2].buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key_a[2].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;

    s_op->val_a[2].buffer = attr->dirdata_handles;
    s_op->val_a[2].buffer_sz = attr->dist_dir_attr.num_servers * 
                    sizeof(*attr->dirdata_handles);
    keep_keyval_buffers(s_op, 2);

    /* set up directory hint attributes */
    k = 3;
    if (pattr->mask & PVFS_ATTR_DIR_HINT)
    {
        if (pattr->u.dir.hint.dfile_count > 0)
        {
            /* convert to string */
            s_op->key_a[k].buffer = Trove_Special_Keys[NUM_DFILES_KEY].key;
            s_op->key_a[k].buffer_sz = Trove_Special_Keys[NUM_DFILES_KEY].size;

            s_op->val_a[k].buffer = (void *)malloc(10);
            if (!s_op->val_a[k].buffer)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }
            slen = snprintf(s_op->val_a[k].buffer,
                            10,
                            "%05d",
                            pattr->u.dir.hint.dfile_count);
            s_op->val_a[k].buffer_sz = slen + 1;
            k++;
        }
        if (pattr->u.dir.hint.dist_name_len > 0)
        {
            s_op->key_a[k].buffer = Trove_Special_Keys[DIST_NAME_KEY].key;
            s_op->key_a[k].buffer_sz = Trove_Special_Keys[DIST_NAME_KEY].size;

            s_op->val_a[k].buffer = pattr->u.dir.hint.dist_name;
            s_op->val_a[k].buffer_sz = pattr->u.dir.hint.dist_name_len;
            keep_keyval_buffers(s_op, k);
            k++;
        }
        if (pattr->u.dir.hint.dist_params_len > 0)
        {
            s_op->key_a[k].buffer = Trove_Special_Keys[DIST_PARAMS_KEY].key;
            s_op->key_a[k].buffer_sz = Trove_Special_Keys[DIST_PARAMS_KEY].size;

            s_op->val_a[k].buffer = pattr->u.dir.hint.dist_params;
            s_op->val_a[k].buffer_sz = pattr->u.dir.hint.dist_params_len;
            keep_keyval_buffers(s_op, k);
            k++;
        }
        if (pattr->u.dir.hint.layout.algorithm > 0)
        {
            /* convert to string */
            s_op->key_a[k].buffer = Trove_Special_Keys[LAYOUT_KEY].key;
            s_op->key_a[k].buffer_sz = Trove_Special_Keys[LAYOUT_KEY].size;

            s_op->val_a[k].buffer = (void *)malloc(10);
            if (!s_op->val_a[k].buffer)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }
            slen = snprintf(s_op->val_a[k].buffer,
                            10,
                            "%05d",
                            pattr->u.dir.hint.layout.algorithm);
            s_op->val_a[k].buffer_sz = slen + 1;
            k++;
        }
        if (pattr->u.dir.hint.layout.server_list.count > 0)
        {
            s_op->key_a[k].buffer = Trove_Special_Keys[SERVER_LIST_KEY].key;
            s_op->key_a[k].buffer_sz = Trove_Special_Keys[SERVER_LIST_KEY].size;

            s_op->val_a[k].buffer = pattr->u.dir.hint.layout.server_list.servers;
            s_op->val_a[k].buffer_sz = pattr->u.dir.hint.layout.server_list.bufsize;
            keep_keyval_buffers(s_op, k);
            k++;
        }
    }
    if (k != keyval_count)
    {
        gossip_lerr("error building args for new dir attributes\n");
    }

    gossip_debug(GOSSIP_MKDIR_DEBUG, 
            "  writing dist-dir-struct keyvals for meta handle: %llu "
            "\t with server_no=%d and branch_level=%d \n", 
            llu(s_op->resp.u.mkdir.handle),
            attr->dist_dir_attr.server_no,
            attr->dist_dir_attr.branch_level);

    ret = job_trove_keyval_write_list(
            s_op->req->u.mkdir.fs_id,
            s_op->resp.u.mkdir.handle, /* directory metadata handle */
            s_op->key_a,
            s_op->val_a,
            keyval_count,
            TROVE_SYNC,
            NULL,
            smcb,
            0,
            js_p,
            &j_id,
            server_job_context,
            s_op->req->hints);

    return ret;
}

static PINT_sm_action mkdir_dirdata_keyval_setattr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;

    /* total 3 keyvals,
     * PVFS_DIST_DIR_ATTR, PVFS_DIRDATA_BITMAP, PVFS_DIRDATA_HANDLES */
    int keyval_count = 3;

    /* free saved capability */
    PINT_cleanup_capability(&s_op->u.mkdir.server_to_server_capability);

    gossip_debug(GOSSIP_MKDIR_DEBUG, 
            "  writing dist-dir-struct keyvals for meta handle: %llu "
            "\t with server_no=%d and branch_level=%d \n", 
            llu(s_op->attr.dirdata_handles[0]),
            s_op->attr.dist_dir_attr.server_no,
            s_op->attr.dist_dir_attr.branch_level);


    ret = job_trove_keyval_write_list(
            s_op->req->u.mkdir.fs_id,
            s_op->attr.dirdata_handles[0], /* local dirdata metadata handle */
            s_op->key_a,
            s_op->val_a,
            keyval_count,
            TROVE_SYNC,
            NULL,
            smcb,
            0,
            js_p,
            &j_id,
            server_job_context,
            s_op->req->hints);

    return ret;
}

static PINT_sm_action mkdir_error(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    s_op->resp.u.mkdir.handle = 0;


    /* clean up objects */
    PINT_free_object_attr(s_op->u.mkdir.saved_attr);
    PINT_cleanup_capability(&s_op->u.mkdir.server_to_server_capability);

    if (js_p->error_code > -1)
    {
        js_p->error_code = -PVFS_EINVAL;
    }
    return 1;
}

/*
 * Function: mkdir_free
 *
 * Params:   server_op *s_op,
 *
 * Returns:  N/A
 *
 * Synopsis: free memory - can be called from outside this source file.
 *
 */
void mkdir_free(struct PINT_server_op *s_op)
{
    if (s_op->attr.dirdata_handles)
    {
        free(s_op->attr.dirdata_handles);
    }
    if (s_op->attr.dist_dir_bitmap)
    {
        free(s_op->attr.dist_dir_bitmap);
    }
    if (s_op->u.mkdir.handle_array_local)
    {
        free(s_op->u.mkdir.handle_array_local);
    }
    if (s_op->u.mkdir.handle_array_remote)
    {
        free(s_op->u.mkdir.handle_array_remote);
    }
    free_keyval_buffers(s_op);
}

/*
 * Function: mkdir_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static PINT_sm_action mkdir_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_perf_timer_end(PINT_server_tpc, PINT_PERF_TMKDIR, &s_op->start_time);
    mkdir_free(s_op);

    if (s_op->msgarray_op.count > 0)
    {
        PINT_free_object_attr(&s_op->req->u.tree_setattr.attr);
    }
    return(server_state_machine_complete(smcb));
}

static PINT_sm_action mkdir_prep_sm(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p = NULL;
    PVFS_ds_attributes *ds_attr = NULL;
    PVFS_uid uid;
    uint32_t num_groups;
    PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS];

    /* This is the first true state action of the create SM so
     * increment the counter for mkdir requests
     */
    PINT_perf_count(PINT_server_pc, PINT_PERF_MKDIR, 1, PINT_PERF_ADD);

    s_op->attr.dirdata_handles = NULL;
    s_op->attr.dist_dir_bitmap = NULL;
    s_op->u.mkdir.handle_array_local = NULL;
    s_op->u.mkdir.handle_array_remote = NULL;
    s_op->key_a = NULL;
    s_op->val_a = NULL;
    s_op->error_a = NULL;

    s_op->u.mkdir.fs_id = s_op->req->u.mkdir.fs_id;
    s_op->u.mkdir.handle_extent_array =
        s_op->req->u.mkdir.handle_extent_array;

    a_p = &(s_op->req->u.mkdir.attr);

    if (a_p->objtype != PVFS_TYPE_DIRECTORY)
    {
        js_p->error_code = -PVFS_EINVAL;
        return SM_ACTION_COMPLETE;
    }

    /* map owner/group from credential */
    if (a_p->mask & (PVFS_ATTR_COMMON_UID|PVFS_ATTR_COMMON_GID) &&
        (a_p->owner == PVFS_UID_MAX || a_p->group == PVFS_GID_MAX))
    {
        int ret;

        ret  = PINT_map_credential(&s_op->req->u.mkdir.credential, 
                                   &uid, &num_groups, group_array);
        if (ret != 0)
        {
            js_p->error_code = ret;
            return SM_ACTION_COMPLETE;
        }

        if (a_p->mask & PVFS_ATTR_COMMON_UID &&
            a_p->owner == PVFS_UID_MAX)
        {
            a_p->owner = uid;
        }

        if (a_p->mask & PVFS_ATTR_COMMON_GID &&
            a_p->group == PVFS_GID_MAX)
        {
            a_p->group = group_array[0];
        }
    }


    gossip_debug(GOSSIP_MKDIR_DEBUG, " attrs to write: [owner = %d, "
                 "group = %d, perms = %o]\n", a_p->owner, a_p->group,
                 a_p->perms);

    /* translate request attrs to storage attr format */
    ds_attr = (&s_op->ds_attr);
    PVFS_object_attr_to_ds_attr(a_p, ds_attr);

    /* copy storage attributes into local object attribute structure */
    PVFS_ds_attr_to_object_attr(ds_attr, &s_op->attr);

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static inline int PINT_get_object_ref_mkdir(
    struct PVFS_server_req *req, PVFS_fs_id *fs_id, PVFS_handle *handle)
{
    *fs_id = req->u.mkdir.fs_id;
    *handle = PVFS_HANDLE_NULL;
    return 0;
}

static PINT_sm_action perm_mkdir(PINT_server_op *s_op)
{
    int ret;

    if (s_op->req->capability.op_mask & PINT_CAP_CREATE)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

PINT_GET_CREDENTIAL_DEFINE(mkdir);

struct PINT_server_req_params pvfs2_mkdir_params =
{
    .string_name = "mkdir",
    .get_object_ref = PINT_get_object_ref_mkdir,
    .perm = perm_mkdir,
    .access_type = PINT_server_req_modify,
    .get_credential = PINT_get_credential_mkdir,
    .state_machine = &pvfs2_mkdir_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
