/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "server-config.h"
#include "pvfs2-storage.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "gossip.h"
#include "pvfs2-internal.h"
#include "pint-perf-counter.h"
#include "pint-security.h"
#include "security-util.h"
#include "pint-cached-config.h"
#include "pint-util.h"
#include "sid.h"

/* Implementation notes
 *
 * This is a complicated machine.  It is capable of removing the three
 * externally visible PVFS2 object types: datafiles, metafiles, and
 * directories.
 *
 * For a datafile, the path through the state machine looks like:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For metafiles and symlinks, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) remove_dspace
 * 5) final_response
 * 6) cleanup
 *
 * For dirdata, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) getattr_of_dirdata_handle
 * 4) check_dirdata_entries
 * 5) remove_dspace
 * 5) final_response
 * 7) cleanup
 *
 * For a directory, the path is:
 * 1) prelude
 * 2) check_object_type
 * 3) verify_object_metadata
 * 4) nested machine: remove_dirdata_handles
 *    (remove_dirdata_handles can rebuild dirdata handles if any dirdata_remove fails.)
 * 5) remove_dspace
 * 6) final_response
 * 7) cleanup
 *
 * A directory that never had entries will skip step (5), as there
 * would be no dirdata dspace.
 */

enum
{
    STATE_TYPE_DIRECTORY = 1,
    STATE_TYPE_DATAFILE = 2,
    STATE_TYPE_METAFILE = 3,
    STATE_TYPE_DIRDATA = 4,
    LOCAL_OPERATION = 5,
    REMOTE_OPERATION = 6,
    REBUILD_DONE
};

%%

nested machine pvfs2_remove_dirdata_handles_work_sm
{
    state remove_dirdata_init
    {
        run remove_dirdata_init;
        /*default => get_dist_dir_attr;*/
        default => get_dirdata_bitmap_and_handles;
    }   
    
/*
    state get_dist_dir_attr
    {
        run remove_get_dist_dir_attr;
        success => get_dirdata_bitmap_and_handles;
        default => return;
    }   
*/
    
    state get_dirdata_bitmap_and_handles
    {
        run remove_get_dirdata_bitmap_and_handles;
        success => get_dirent_count_setup_tree_getattr;
        default => remove_dirdata_handles_cleanup;
    }   
    
    state get_dirent_count_setup_tree_getattr
    {
        run remove_get_dirent_count_setup_tree_getattr;
        success => get_dirent_count_call_tree_getattr;
        default => get_dirent_count_cleanup_tree_getattr;
    }   
    
    state get_dirent_count_call_tree_getattr
    {
        jump pvfs2_tree_getattr_work_sm;
        success => get_dirent_count_examine_tree_getattr;
        default => remove_dirdata_handles_cleanup;
    }   

    state get_dirent_count_examine_tree_getattr
    {
        run remove_get_dirent_count_examine_tree_getattr;
        success => remove_dirdata_handles_setup_tree_remove;
        default => remove_dirdata_handles_cleanup;
    }

    state get_dirent_count_cleanup_tree_getattr
    {
        run remove_get_dirent_count_cleanup_tree_getattr;
        default => remove_dirdata_handles_cleanup;
    }
 
    state remove_dirdata_handles_setup_tree_remove
    {
        run remove_dirdata_handles_setup_tree_remove;
        success => remove_dirdata_handles_call_tree_remove;
        default => remove_dirdata_handles_cleanup_tree_remove;
    }   
    
    state remove_dirdata_handles_call_tree_remove
    {
        jump pvfs2_tree_remove_work_sm;
        success => remove_dirdata_handles_check_remove_success;
        default => rebuild_dirdata_handle_local;
    }   

    state remove_dirdata_handles_check_remove_success
    {
        run remove_dirdata_handles_check_remove_success;
        success => remove_dirdata_handles_cleanup;
        default => rebuild_dirdata_handle_local;
    }

    state remove_dirdata_handles_cleanup_tree_remove
    {
        run remove_dirdata_handles_cleanup_tree_remove;
        default => remove_dirdata_handles_cleanup;
    }
    
    state rebuild_dirdata_handle_local
    {
        run remove_rebuild_dirdata_handle_local;
        success => rebuild_dirdata_handle_remote;
        default => remove_dirdata_handles_cleanup;
    }   
    
    state rebuild_dirdata_handle_remote
    {
        run remove_rebuild_dirdata_handle_remote;
        success => remote_dirdata_keyval_setup_msgpair;
        default => remove_dirdata_handles_cleanup;
    }   
    
    /* write dirdata keyval to remote dirdata handles */
    state remote_dirdata_keyval_setup_msgpair 
    {
        run remove_rebuild_remote_dirdata_keyval_setup_msgpair;
        REBUILD_DONE => rebuild_done;
        success => remote_dirdata_keyval_xfer_msgpair;
        default => remove_dirdata_handles_cleanup;
    }   
    
    state rebuild_done
    {
        run remove_rebuild_done;
        default => remove_dirdata_handles_cleanup;
    }   

    state remote_dirdata_keyval_xfer_msgpair
    {
        jump pvfs2_msgpairarray_sm;
        success => write_dirdata_keyval;
        default => remove_dirdata_handles_cleanup;
    }

    state write_dirdata_keyval
    {
        run remove_rebuild_write_dirdata_keyval;
        default => remove_dirdata_handles_cleanup;
    }

    state remove_dirdata_handles_cleanup
    {
        run remove_remove_dirdata_handles_cleanup;
        default => return;
    }
}

nested machine pvfs2_remove_work_sm
{

    state check_object_type
    {
        run remove_check_object_type;
        STATE_TYPE_METAFILE => remove_dspace;
        STATE_TYPE_DATAFILE => remove_dspace;
        STATE_TYPE_DIRECTORY => remove_dirdata_handles;
        STATE_TYPE_DIRDATA => getattr_of_dirdata_handle;
        default => return;
    }

    state getattr_of_dirdata_handle
    {
        run remove_get_dirent_count;
        default => check_dirdata_entries;
    }

    state check_dirdata_entries
    {
        run remove_check_dirdata_entries;
        success => remove_dspace;
        default => return;
    }

    state remove_dirdata_handles
    {
        jump pvfs2_remove_dirdata_handles_work_sm;
        success => remove_dspace;
        default => return;
    }

    state remove_dspace
    {
        run remove_remove_dspace;
        default => return;
    }
}

nested machine pvfs2_remove_with_prelude_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => do_work;
        default => return;
    }

    state do_work
    {
        jump pvfs2_remove_work_sm;
        default => return;
    }
}

machine pvfs2_remove_sm
{
    state work
    {
        jump pvfs2_remove_with_prelude_sm;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run remove_cleanup;
        default => terminate;
    }
}

%%

/*
 * Function: remove_check_object_type
 *
 * decides whether to follow the path for datafile removal or
 * nonedatafile removal, based on whether we were able to successfully
 * retrive object attributes earlier
 *
 */
static PINT_sm_action remove_check_object_type(struct PINT_smcb *smcb,
                                               job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p;

    a_p = &s_op->attr;
    js_p->error_code = 0;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  attrs read from keyval = (owner = %d, "
                 "group = %d, perms = %o, type = %d)\n",
                 a_p->owner,
                 a_p->group,
                 a_p->perms,
                 a_p->objtype);

    if(a_p->objtype == PVFS_TYPE_METAFILE)
    {
        /* it must be a metafile, transition to try reading metafile 
         * attribs with dspace_getattr()
         */
        gossip_debug(GOSSIP_SERVER_DEBUG, "  type is metafile; removing\n");
        js_p->error_code = STATE_TYPE_METAFILE;
        return SM_ACTION_COMPLETE;
    }

    if(a_p->objtype == PVFS_TYPE_DATAFILE)
    {
        /* it must be a datafile, transition to try reading datafile 
         * attribs with dspace_getattr()
         */
        gossip_debug(GOSSIP_SERVER_DEBUG, "  type is datafile; removing\n");
        js_p->error_code = STATE_TYPE_DATAFILE;
        return SM_ACTION_COMPLETE;
    }

    if (a_p->objtype == PVFS_TYPE_DIRDATA)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "  type is dirdata; checking "
                     "dirent_count before removing dirdata itself.\n");
        js_p->error_code = STATE_TYPE_DIRDATA;
        return SM_ACTION_COMPLETE;
    }

    if (a_p->objtype == PVFS_TYPE_DIRECTORY)
    {
        /* This is the first point we know this is a rmdir so
         * increment the counter for rmdir requests
         */


        gossip_debug(GOSSIP_SERVER_DEBUG, "  type is directory; removing "
                     "dirdata object before removing directory itself.\n");
	js_p->error_code = STATE_TYPE_DIRECTORY;
        return SM_ACTION_COMPLETE;
    }

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_get_dirent_count(struct PINT_smcb *smcb,
                                              job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    job_id_t tmp_id;

    if (js_p->error_code < 0)
    {
        return SM_ACTION_COMPLETE;
    }
    js_p->error_code = 0;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "remove: getting dirdata dirent_count...\n");

    ret = job_trove_keyval_iterate_keys(s_op->req->u.remove.fs_id,
                                        /* it's a dirdata handle */
                                        s_op->req->u.remove.handle,
                                        PVFS_ITERATE_START,
                                        &s_op->u.remove.key,
                                        1,
                                        TROVE_KEYVAL_DIRECTORY_ENTRY,
                                        NULL,
                                        smcb,
                                        0,
                                        js_p,
                                        &tmp_id,
                                        server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action remove_check_dirdata_entries(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op __attribute__((unused)) =
                    PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "remove: dirdata returning error_code = %d, count = %d\n",
                 js_p->error_code, js_p->count);

    if (js_p->error_code == 0)
    {
        if(js_p->count > 0)
        {
            gossip_debug(GOSSIP_SERVER_DEBUG, 
                         " detected non-empty "
                         "directory (fsid: %u, handle: %s) "
                         "-- returning error\n",
                         s_op->req->u.remove.fs_id,
                         PVFS_OID_str(&s_op->req->u.remove.handle));
            js_p->error_code = -PVFS_ENOTEMPTY;
        }
    }
    else if(js_p->error_code == -TROVE_ENOENT)
    {
        /* no entries because count is 0 */
        js_p->error_code = 0;
    }

    /* setup position for next state (remove[_dirdata]_keyvals) */
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_dirdata_init(struct PINT_smcb *smcb,
                                          job_status_s *js_p)
{       
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    
    s_op->u.remove.saved_error_code = 0;
    s_op->u.remove.need_rebuild_dirdata_local = 0;
    s_op->u.remove.local_dirdata_index = -1;
    s_op->u.remove.num_rebuild_dirdata_remote = 0;
    s_op->u.remove.rebuild_dirdata_index_array_remote = NULL;
    s_op->u.remove.handle_array_remote = NULL;

    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

#if 0
static PINT_sm_action remove_get_dist_dir_attr(struct PINT_smcb *smcb,
                                               job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    job_id_t j_id;

    /* set up key and value structures for reading the dist_dir_attr */
    s_op->key.buffer = Trove_Common_Keys[DIST_DIR_ATTR_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIST_DIR_ATTR_KEY].size;
    if(s_op->free_val)
    {
        free(s_op->val.buffer);
    }

    s_op->val.buffer = &s_op->attr.u.dir.dist_dir_attr;
    s_op->val.buffer_sz = sizeof(PVFS_dist_dir_attr);
    s_op->free_val = 0;

    js_p->error_code = 0;
    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  trying to read dist_dir_attr (coll_id = %d, "
                 "handle = %s, key = %s (%d), val_buf = %p (%d))\n",
                 s_op->req->u.remove.fs_id,
                 PVFS_OID_str(&s_op->req->u.remove.handle),
                 (char *)s_op->key.buffer, s_op->key.buffer_sz,
                 s_op->val.buffer, s_op->val.buffer_sz);

    ret = job_trove_keyval_read(s_op->req->u.remove.fs_id,
                                s_op->req->u.remove.handle,
                                &s_op->key,
                                &s_op->val,
                                0,
                                NULL,
                                smcb,
                                0,
                                js_p,
                                &j_id,
                                server_job_context,
                                s_op->req->hints);

    return ret;
}
#endif


static PINT_sm_action remove_get_dirdata_bitmap_and_handles(
                                                    struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret;
    PVFS_object_attr *attr_p;
    job_id_t j_id;

    attr_p = &s_op->attr;

    /* Need a comment here saying what this is
     * I don't know or I'd put one
     */
    if(js_p->error_code == -TROVE_ENOENT)
    {
        gossip_lsdebug(GOSSIP_SERVER_DEBUG,
                     "Error Code ENOENT\n");
        attr_p->u.dir.dist_dir_bitmap = NULL;
        attr_p->u.dir.dirdata_handles = NULL;
        return SM_ACTION_COMPLETE;
    }

    assert(attr_p->u.dir.dist_dir_attr.dirdata_count > 0);
    
    gossip_lsdebug(GOSSIP_SERVER_DEBUG, 
                 "for dir meta handle %s "
                 "with tree_height=%d, dirdata_count=%d, bitmap_size=%d, "
                 "split_size=%d, server_no=%d and branch_level=%d\n",
                 PVFS_OID_str(&s_op->req->u.remove.handle),
                 attr_p->u.dir.dist_dir_attr.tree_height,
                 attr_p->u.dir.dist_dir_attr.dirdata_count,
                 attr_p->u.dir.dist_dir_attr.bitmap_size,
                 attr_p->u.dir.dist_dir_attr.split_size,
                 attr_p->u.dir.dist_dir_attr.server_no,
                 attr_p->u.dir.dist_dir_attr.branch_level);

              /* PVFS_OID_str(&s_op->u.remove.handle), */

    /* allocate space for dirdata handles */
    attr_p->u.dir.dist_dir_bitmap = 
                malloc(attr_p->u.dir.dist_dir_attr.bitmap_size *
                       sizeof(PVFS_dist_dir_bitmap_basetype));

    attr_p->u.dir.dirdata_handles = 
                malloc(OSASZ(attr_p->u.dir.dist_dir_attr.dirdata_count, 
                             attr_p->u.dir.dist_dir_attr.sid_count));

    attr_p->u.dir.dirdata_sids = (PVFS_SID *)(attr_p->u.dir.dirdata_handles +
                                 attr_p->u.dir.dist_dir_attr.dirdata_count);

    if(!attr_p->u.dir.dirdata_handles || !attr_p->u.dir.dist_dir_bitmap)
    {
        free(attr_p->u.dir.dirdata_handles);
        free(attr_p->u.dir.dist_dir_bitmap);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* set up attr->mask */
    attr_p->mask |= PVFS_ATTR_DISTDIR_ATTR;

    /* will read bitmap and dirdata handles in keyval */
    int keyval_count = 2;

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    s_op->error_a = calloc(keyval_count, sizeof(PVFS_error));
    if(!s_op->key_a || !s_op->val_a || !s_op->error_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    memset(s_op->val_a, 0, sizeof(PVFS_ds_keyval) * keyval_count);
    memset(s_op->error_a, 0, sizeof(PVFS_error) * keyval_count);

    /* set up key and value structures for reading dirdata handles */
    s_op->key_a[0].buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;

    s_op->val_a[0].buffer = attr_p->u.dir.dirdata_handles;
    s_op->val_a[0].buffer_sz = OSASZ(attr_p->u.dir.dist_dir_attr.dirdata_count,
                                     attr_p->u.dir.dist_dir_attr.sid_count); 

    /* !!! set bitmap keyval field */
    s_op->key_a[1].buffer = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].size;

    s_op->val_a[1].buffer_sz =
                    attr_p->u.dir.dist_dir_attr.bitmap_size * 
                    sizeof(PVFS_dist_dir_bitmap_basetype);
    s_op->val_a[1].buffer = attr_p->u.dir.dist_dir_bitmap;

    js_p->error_code = 0;
    gossip_lsdebug(GOSSIP_SERVER_DEBUG,
                 "trying to read dirdata handles (coll_id = %d, "
                 "handle = %s, key = %s (%d), val_buf = %p (%d)) and "
                 "dirdata bitmap (key = %s (%d), val_buf = %p (%d))\n",
                 s_op->req->u.remove.fs_id,
                 PVFS_OID_str(&s_op->req->u.remove.handle),
                 (char *)s_op->key_a[0].buffer, s_op->key_a[0].buffer_sz,
                 s_op->val_a[0].buffer, s_op->val_a[0].buffer_sz,
                 (char *)s_op->key_a[1].buffer, s_op->key_a[1].buffer_sz,
                 s_op->val_a[1].buffer, s_op->val_a[1].buffer_sz);

    ret = job_trove_keyval_read_list(s_op->req->u.remove.fs_id,
                                     s_op->req->u.remove.handle,
                                     s_op->key_a,
                                     s_op->val_a,
                                     s_op->error_a,
                                     keyval_count,
                                     0,
                                     NULL,
                                     smcb,
                                     0,
                                     js_p,
                                     &j_id,
                                     server_job_context,
                                     s_op->req->hints);

    return ret;
}

static PINT_sm_action remove_get_dirent_count_setup_tree_getattr(
                                                    struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *getattr_op = NULL;
    struct PVFS_server_req *req = NULL;
    PVFS_object_attr *attr_p = NULL;
    PVFS_capability capability;
    int location = REMOTE_OPERATION;

    gossip_lsdebug(GOSSIP_SERVER_DEBUG,
                   "Starting State Action s_op = (%p) attr_p = (%p)\n",
                   s_op, &s_op->attr);
    attr_p = &s_op->attr;
    PINT_CREATE_SUBORDINATE_SERVER_FRAME(smcb
                                        ,getattr_op
                                        ,attr_p->u.dir.dirdata_sids[0] /*FIXME*/
                                        ,s_op->req->u.remove.fs_id
                                        ,location
                                        ,req
                                        ,0);

    gossip_debug(GOSSIP_SERVER_DEBUG, "%s: Setting NULL capability\n", __func__);
    PINT_null_capability(&capability);

    gossip_debug(GOSSIP_SERVER_DEBUG, "%s: Filling getattr req (%p)\n", __func__, req);
    PINT_SERVREQ_TREE_GETATTR_FILL(
                        *req,
                        PVFS_REQ_DIRDATA,
                        capability,
                        s_op->req->u.remove.credential,
                        s_op->req->u.remove.fs_id,
                        0,
                        attr_p->u.dir.dist_dir_attr.dirdata_count,
                        attr_p->u.dir.dirdata_handles,
                        attr_p->u.dir.dist_dir_attr.sid_count,
                        attr_p->u.dir.dirdata_sids,
                        /* only interested in dirent_count */
                        PVFS_ATTR_DIR_DIRENT_COUNT,
                        0,
                        s_op->req->hints);

    gossip_debug(GOSSIP_SERVER_DEBUG, "%s: Cleanup capability\n", __func__);
    PINT_cleanup_capability(&capability);

    gossip_debug(GOSSIP_SERVER_DEBUG, "%s: State Action Complete\n", __func__);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_get_dirent_count_cleanup_tree_getattr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *getattr_op = NULL;
    int task_id = 0, error_code = 0;

    /* Clean up the frame that was created for tree_getattr. */
    getattr_op = PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    tree_getattr_free(getattr_op);
    PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(getattr_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_get_dirent_count_examine_tree_getattr(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = NULL;
    struct PINT_server_op *getattr_op = NULL;
    PVFS_object_attr *attr_p = NULL;
    int task_id = 0, error_code = 0;
    int i = 0;

    /* Make sure the count of directory entries that we retrieved was 0. */
    /* This pops the frame for the getattr */
    getattr_op = PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    attr_p = &s_op->attr;
    if (error_code != 0)
    {
        js_p->error_code = error_code;
        tree_getattr_free(getattr_op);
        PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(getattr_op);
        return SM_ACTION_COMPLETE;
    }
    for (i = 0; i < attr_p->u.dir.dist_dir_attr.dirdata_count; i++)
    {
        if (getattr_op->resp.u.tree_getattr.attr[i].u.dir.dirent_count > 0)
        {
            js_p->error_code = -PVFS_ENOTEMPTY;
            tree_getattr_free(getattr_op);
            PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(getattr_op);
            return SM_ACTION_COMPLETE;
        }
    }
    js_p->error_code = 0;

    /* perform cleanup routine and free getattr_op (allocated as
      subordinate frame) */
    tree_getattr_free(getattr_op);
    PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(getattr_op);

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_dirdata_handles_setup_tree_remove(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    struct PINT_server_op *remove_op = NULL;
    struct PVFS_server_req *req = NULL;
    PVFS_object_attr *attr_p = NULL;
    int location = 0;

    attr_p = &s_op->attr;
    assert(attr_p);

    /* initialize rebuild array */
    s_op->u.remove.rebuild_dirdata_index_array_remote = 
                malloc(sizeof(int) * attr_p->u.dir.dist_dir_attr.dirdata_count);
    if(!s_op->u.remove.rebuild_dirdata_index_array_remote )
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    PINT_CREATE_SUBORDINATE_SERVER_FRAME(smcb,
                                         remove_op,
                                         attr_p->u.dir.dirdata_sids[0], /* FIXME? */
                                         //attr_p->u.dir.dirdata_handles[0],
                                         s_op->req->u.remove.fs_id,
                                         location,
                                         req,
                                         LOCAL_OPERATION);

    PINT_SERVREQ_TREE_REMOVE_FILL(*req,
                                  s_op->req->capability,
                                  s_op->req->u.remove.credential,
                                  s_op->req->u.remove.fs_id,
                                  0,
                                  attr_p->u.dir.dist_dir_attr.dirdata_count,
                                  attr_p->u.dir.dirdata_handles,
                                  attr_p->u.dir.dist_dir_attr.sid_count,
                                  attr_p->u.dir.dirdata_sids,
                                  s_op->req->hints);

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_dirdata_handles_cleanup_tree_remove(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *remove_op = NULL;
    int task_id = 0, error_code = 0;

    /* Clean up the frame that was created for tree_remove. */
    remove_op = PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    tree_remove_free(remove_op);
    PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(remove_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_dirdata_handles_check_remove_success(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = NULL;
    struct PINT_server_op *remove_op = NULL;
    PVFS_object_attr *attr_p = NULL;
    int task_id = 0, error_code = 0;
    int i = 0;

    /* This pops the frame for the tree remove - success */
    remove_op = PINT_sm_pop_frame(smcb, &task_id, &error_code, NULL);
    s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    if (error_code != 0)
    {
        js_p->error_code = error_code;
        tree_remove_free(remove_op);
        PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(remove_op);
        return SM_ACTION_COMPLETE;
    }
    attr_p = &s_op->attr;
    for (i = 0; i < attr_p->u.dir.dist_dir_attr.dirdata_count; i++)
    {
        if (remove_op->resp.u.tree_remove.status != 0)
        {
            js_p->error_code = error_code;
            tree_remove_free(remove_op);
            PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(remove_op);
            return SM_ACTION_COMPLETE;
        }
    }

    /* free remove_op (allocated as subordinate frame) */
    tree_remove_free(remove_op);
    PINT_CLEANUP_SUBORDINATE_SERVER_FRAME(remove_op);

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_rebuild_dirdata_handle_local(
                                                    struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_ENOMEM;
    job_id_t tmp_id;
    PVFS_handle *handle_array = NULL; /* V3 who assigns this? */
#if 0
    server_configuration_s *user_opts = PINT_server_config_mgr_get_config();
#endif

    /* save error_code */
    gossip_debug(
            GOSSIP_SERVER_DEBUG, "  remove_rebuild_dirdata: saving error_code %d\n",
            js_p->error_code);
    s_op->u.remove.saved_error_code = js_p->error_code;
    js_p->error_code = 0;

    if(!s_op->u.remove.need_rebuild_dirdata_local)
    {
        gossip_debug(
                GOSSIP_SERVER_DEBUG, "  No need to rebuild local dirdata handle! "
                "move to remote dirdata rebuild !\n");
        return SM_ACTION_COMPLETE;
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, 
                 "  remove_rebuild_dirdata: rebuilding local dirdata handle! \n");

/* V3 no extents or pools inn V3 */
#if 0
    ret = PINT_config_get_meta_handle_extent_array(user_opts,
                                                   s_op->req->u.remove.fs_id,
                                                   &extent_array);
    assert(ret == 0);
    assert(extent_array.extent_count > 0);

    gossip_debug(GOSSIP_SERVER_DEBUG, " local dirdata handle(s) will "
                 "be in starting hrange[0] %s-%s\n",
                 PVFS_OID_str(extent_array.extent_array[0].first),
                 PVFS_OID_str(extent_array.extent_array[0].last));
#endif

    ret = job_trove_dspace_create_list(s_op->req->u.remove.fs_id,
                                       handle_array,
                                       &s_op->u.remove.handle_local,
                                       1, /* dirdata_count_local = 1 */
                                       PVFS_TYPE_DIRDATA, 
                                       NULL,
                                       TROVE_SYNC,
                                       smcb,
                                       0,
                                       js_p,
                                       &tmp_id,
                                       server_job_context, 
                                       s_op->req->hints);

#if 0
    free(extent_array.extent_array);
#endif

    return(ret);
}

/* V3 probably remove this state */
static PINT_sm_action remove_rebuild_dirdata_handle_remote(
                                                     struct PINT_smcb *smcb,
                                                     job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
#if 0
    job_id_t j_id;
#endif
    int ret = -PVFS_ENOMEM, i;
    char **io_servers_remote = NULL;
    char *string_buffer = NULL;

    if(s_op->u.remove.need_rebuild_dirdata_local)
    {
        gossip_debug(
                GOSSIP_SERVER_DEBUG, "  rebuilt local dirdata handle (%s)\n",
                PVFS_OID_str(&s_op->u.remove.handle_local));
    }

    if(s_op->u.remove.num_rebuild_dirdata_remote == 0)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "  No need to rebuild remote dirdata handle! "
                     "move to write keyval !\n");
        return SM_ACTION_COMPLETE;
    }

    /* allocate space */
    io_servers_remote = malloc( sizeof(char*) *
                          s_op->u.remove.num_rebuild_dirdata_remote);
    string_buffer = malloc(sizeof(char) * 1024 * 
                          s_op->u.remove.num_rebuild_dirdata_remote);
    s_op->u.remove.handle_array_remote = malloc(
                          OASZ(s_op->u.remove.num_rebuild_dirdata_remote));
    if(!io_servers_remote || !string_buffer ||
            !s_op->u.remove.handle_array_remote)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    /* find server strings */
    for(i = 0; i < s_op->u.remove.num_rebuild_dirdata_remote; i++)
    {
        io_servers_remote[i] = string_buffer + i * 1024;
        /* V3 not sure what this is for - we really don't want to mess
         * with server names, server SIDs are much better, so depending
         * on what this is being used for we should just build a list of
         * SIDs
         */
#if 0
        PINT_cached_config_get_server_name(
                io_servers_remote[i],
                1024, 
                s_op->attr.u.dir.dirdata_handles[
                           s_op->u.remove.rebuild_dirdata_index_array_remote[i]], 
                s_op->req->u.remove.fs_id);
#endif
    }

    /* request remote dirdata handles */
    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  rebuilding local %d remote dirdata handles! \n",
                 s_op->u.remove.num_rebuild_dirdata_remote);

    /* V3 this function going away */
#if 0
    ret = job_precreate_pool_get_handles(s_op->req->u.remove.fs_id,
                                        s_op->u.remove.num_rebuild_dirdata_remote,
                                        PVFS_TYPE_DIRDATA,
                                        (const char **)io_servers_remote, 
                                        s_op->u.remove.handle_array_remote,
                                        0,
                                        smcb,
                                        0,
                                        js_p,
                                        &j_id,
                                        server_job_context,
                                        s_op->req->hints);
#endif

    free(string_buffer);
    free(io_servers_remote);

    return ret;
}


static PINT_sm_action remove_rebuild_remote_dirdata_keyval_setup_msgpair(
                                                         struct PINT_smcb *smcb,
                                                         job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_sm_msgpair_state *msg_p = NULL;
    PVFS_object_attr attr;
    int i;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  remove_rebuild_remote_dirdata_keyval_setup_msgpair: \n");

    if(!s_op->u.remove.need_rebuild_dirdata_local && 
            (s_op->u.remove.num_rebuild_dirdata_remote == 0))
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "  no dirdata handles got rebuilt! "
                     "no need to write keyval.  "
                     "move to dirdata cleanup !\n");
        js_p->error_code = REBUILD_DONE;
        return SM_ACTION_COMPLETE;
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, 
                 "\t remove_rebuild: ORIGINAL dirdata "
                 "handles array of directory %s.\n",
                 PVFS_OID_str(&s_op->req->u.remove.handle));

    for(i = 0; i < s_op->attr.u.dir.dist_dir_attr.dirdata_count; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, 
                     "\t\tdirdata server [%d]: %s.\n",
                     i, PVFS_OID_str(&s_op->attr.u.dir.dirdata_handles[i]));
    }

    /* fill in rebuilt dirdata handles */
    if(s_op->u.remove.need_rebuild_dirdata_local)
    {
        s_op->attr.u.dir.dirdata_handles[0] = s_op->u.remove.handle_local;
    }

    for(i = 0; i < s_op->u.remove.num_rebuild_dirdata_remote; i++)
    {
        s_op->attr.u.dir.dirdata_handles[
                        s_op->u.remove.rebuild_dirdata_index_array_remote[i]] = 
                s_op->u.remove.handle_array_remote[i];
    }

    gossip_debug(GOSSIP_SERVER_DEBUG, 
                 "\t remove_rebuild: REBUILT dirdata handles "
                 "array of directory %s.\n",
                 PVFS_OID_str(&s_op->req->u.remove.handle));

    for(i = 0; i < s_op->attr.u.dir.dist_dir_attr.dirdata_count; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, 
                     "\t\tdirdata server [%d]: %s.\n",
                     i, PVFS_OID_str(&s_op->attr.u.dir.dirdata_handles[i]));
    }

    /* start sending distdir attrs */
    gossip_debug(GOSSIP_SERVER_DEBUG, "remove_rebuild: send_remote_dir_data\n");

    /* !!! set dirdata attr, set all the static component */
    memcpy(&attr, &s_op->attr, sizeof(attr));
    attr.objtype = PVFS_TYPE_DIRDATA;
    attr.mask = PVFS_ATTR_COMMON_ALL;
    attr.mask |= PVFS_ATTR_DISTDIR_ATTR;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "remove_rebuild: SENDING attrs: [owner = %d, group = %d\n\t"
                 "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
                 "ctime = %llu ]\n",
                 attr.owner, attr.group, attr.perms,
                 attr.objtype, llu(attr.atime),
                 llu((PINT_util_mkversion_time(attr.mtime))), llu(attr.ctime));

    /* msgpair_init already does cleanup */
    PINT_msgpair_init(&s_op->msgarray_op);
    msg_p = &s_op->msgarray_op.msgpair;
    PINT_serv_init_msgarray_params(s_op, s_op->req->u.remove.fs_id);

    PINT_SERVREQ_TREE_SETATTR_FILL(msg_p->req,
                                   PVFS_REQ_DIRDATA,
                                   s_op->req->capability,
                                   s_op->req->u.remove.credential,
                                   s_op->req->u.remove.fs_id,
                                   PVFS_TYPE_DIRDATA,
                                   attr,
                                   0,
                                   s_op->attr.u.dir.dist_dir_attr.dirdata_count,
                                   s_op->attr.u.dir.dirdata_handles,
                                   0,    /* V3 sid count */
                                   NULL, /* V3 sid array */
                                   s_op->req->hints);

    msg_p->fs_id = s_op->req->u.remove.fs_id;
    msg_p->handle = s_op->attr.u.dir.dirdata_handles[0];
    msg_p->retry_flag = PVFS_MSGPAIR_RETRY;
    msg_p->comp_fn = NULL;

    /* V3 */
#if 0
    ret = PINT_cached_config_map_to_server(
        &msg_p->svr_addr, msg_p->handle, msg_p->fs_id);

    ret = PVFS_SID_get_addr(&msg_p->svr_addr, &msg_p->sid_array[0]);
    if (ret)
    {
        gossip_err("Failed to map dirdata server address\n");
        js_p->error_code = ret;
        return SM_ACTION_COMPLETE;
    }
#endif

    PINT_sm_push_frame(smcb, 0, &s_op->msgarray_op);
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_rebuild_done(struct PINT_smcb *smcb,
                                          job_status_s *js_p)
{
    js_p->error_code = 0;
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action remove_rebuild_write_dirdata_keyval(
                                                    struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_ENOMEM;
    job_id_t j_id;


    /* set up key and value structures for writing dirdata handles */
    s_op->key.buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;
    if(s_op->free_val)
    {
        free(s_op->val.buffer);
    }

    s_op->val.buffer = s_op->attr.u.dir.dirdata_handles;

    s_op->val.buffer_sz = OSASZ(s_op->attr.u.dir.dist_dir_attr.dirdata_count,
                                s_op->attr.u.dir.dist_dir_attr.sid_count);

    s_op->free_val = 0; /* will be freed in PINT_free_object_attr */

    js_p->error_code = 0;
    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "  trying to write dirdata handles (coll_id = %d, "
                 "handle = %s, key = %s (%d), val_buf = %p (%d))\n",
                 s_op->req->u.remove.fs_id,
                 PVFS_OID_str(&s_op->req->u.remove.handle),
                 (char *)s_op->key.buffer, s_op->key.buffer_sz,
                 s_op->val.buffer, s_op->val.buffer_sz);

    ret = job_trove_keyval_write(s_op->req->u.remove.fs_id,
                                 s_op->req->u.remove.handle,
                                 &s_op->key,
                                 &s_op->val,
                                 0,
                                 NULL,
                                 smcb,
                                 0,
                                 js_p,
                                 &j_id,
                                 server_job_context,
                                 s_op->req->hints);

    return ret;

}


static PINT_sm_action remove_remove_dirdata_handles_cleanup(
                                                    struct PINT_smcb *smcb,
                                                    job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_msgpairarray_destroy(&s_op->msgarray_op);

    if(s_op->u.remove.rebuild_dirdata_index_array_remote)
    {
        free(s_op->u.remove.rebuild_dirdata_index_array_remote);
    }
    if(s_op->u.remove.handle_array_remote)
    {
        free(s_op->u.remove.handle_array_remote);
    }
    if(s_op->key_a)
    {
        free(s_op->key_a);
        s_op->key_a = NULL;
    }
    if(s_op->val_a)
    {
        free(s_op->val_a);
        s_op->val_a = NULL;
    }
    if(s_op->error_a)
    {
        free(s_op->error_a);
        s_op->error_a = NULL;
    }

    /* restoring js_p->error_code  */
    if(s_op->u.remove.saved_error_code)
    {
        js_p->error_code = s_op->u.remove.saved_error_code;
    }

    return SM_ACTION_COMPLETE;
}

/*
 * Function: remove_remove_dspace
 *
 * Remove the dspace using the handle from the incoming request
 * (which was verified in previous states).
 */
static PINT_sm_action remove_remove_dspace(struct PINT_smcb *smcb,
                                           job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t j_id;
    gossip_debug(GOSSIP_SERVER_DEBUG, "(%p) remove: removing dspace "
                 "object %s,%d\n", s_op,
                 PVFS_OID_str(&s_op->req->u.remove.handle),
                 s_op->req->u.remove.fs_id);

    ret = job_trove_dspace_remove(s_op->req->u.remove.fs_id,
                                  s_op->req->u.remove.handle,
                                  TROVE_SYNC,
                                  smcb,
                                  0,
                                  js_p,
                                  &j_id,
                                  server_job_context,
                                  s_op->req->hints);

    return ret;
}

/*
 * Function: remove_cleanup
 *
 * Free all memory associated with this request and return 0, indicating
 * we're done processing.
 */
static PINT_sm_action remove_cleanup(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    if (s_op->attr.objtype == PVFS_TYPE_DIRECTORY)
    {
        PINT_perf_count(PINT_server_pc, PINT_PERF_RMDIR, 1, PINT_PERF_ADD);
        PINT_perf_timer_end(PINT_server_tpc,
                            PINT_PERF_TRMDIR,
                            &s_op->start_time);
    }
    else if (s_op->attr.objtype == PVFS_TYPE_METAFILE)
    {
        PINT_perf_count(PINT_server_pc, PINT_PERF_REMOVE, 1, PINT_PERF_ADD);
        PINT_perf_timer_end(PINT_server_tpc,
                            PINT_PERF_TREMOVE,
                            &s_op->start_time);
    }

    PINT_free_object_attr(&s_op->attr);
    return(server_state_machine_complete(smcb));
}

static int perm_remove(PINT_server_op *s_op)
{
    int ret;

    /* this capability is for the parent of the target object */
    if (s_op->req->capability.op_mask & PINT_CAP_REMOVE)
    {
        ret = 0;
    }
    else
    {
        ret = -PVFS_EACCES;
    }

    return ret;
}

PINT_GET_OBJECT_REF_DEFINE(remove);

struct PINT_server_req_params pvfs2_remove_params =
{
    .string_name = "remove",
    .get_object_ref = PINT_get_object_ref_remove,
    .perm = perm_remove,
    .access_type = PINT_server_req_modify,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .state_machine = &pvfs2_remove_sm
};


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
